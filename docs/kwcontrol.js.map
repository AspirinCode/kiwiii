{"version":3,"file":"kwcontrol.js","sources":["../src/store/StoreConnection.js","../src/Loader.js","../src/helper/formatValue.js","../src/component/Component.js","../src/control.js","../src/helper/definition.js","../src/store/IDBStore.js","../src/fetcher/Fetcher.js","../src/fetcher/LocalServer.js","../src/fetcher/Screener.js","../src/fetcher/ScreenerTestStub.js"],"sourcesContent":["\nimport {default as def} from '../helper/definition.js';\nimport {default as store} from './IDBStore.js';\nimport {LocalServerActivity, LocalServerChemical} from '../fetcher/LocalServer.js';\nimport {ScreenerFitting, ScreenerRawValue} from '../fetcher/Screener.js';\nimport {ScreenerFittingStub, ScreenerRawValueStub} from '../fetcher/ScreenerTestStub.js';\n\n\n// Global config\n\nconst globalConfig = {\n  \"onLine\": true,\n  \"server\": {},\n  \"templates\": {},\n  \"urlQuery\": {}\n};\n\nwindow.location.search.substring(1).split(\"&\")\n  .map(e => e.split('=')).forEach(e => {\n    globalConfig.urlQuery[e[0]] = e[1];\n  });\n\n\nfunction getGlobalConfig(key) {\n  return globalConfig[key];\n}\n\n\nfunction setGlobalConfig(key, value) {\n  globalConfig[key] = value;\n}\n\n\n// API instances\n\nconst API = new Map(Object.entries({\n  chemical: new LocalServerChemical(),\n  activity: new LocalServerActivity(),\n  screenerrawvalue: new ScreenerRawValue(),\n  screenerfitting: new ScreenerFitting(),\n  screenerrawvaluestub: new ScreenerRawValueStub(),\n  screenerfittingstub: new ScreenerFittingStub()\n}));\n\n\nfunction localChemInstance() {\n  return API.get('chemical');\n}\n\n\nfunction getFetcher(domain) {\n  return API.get(domain);\n}\n\n\nfunction fetcherInstances() {\n  return Array.from(API.values());\n}\n\n\nfunction dataFetcherInstances() {\n  const res = [];\n  API.forEach((v, k) => {\n    if (k !== 'chemical') res.push(v);\n  });\n  return res;\n}\n\n\nfunction dataFetcherDomains() {\n  const res = [];\n  API.forEach((v, k) => {\n    if (k !== 'chemical') res.push(k);\n  });\n  return res;\n}\n\n\n// API data resource on local IndexedDB\n\nfunction getResources(domains) {\n  return store.getResources().then(rsrcs => {\n    return rsrcs.filter(e => domains.includes(e.domain));\n  });\n}\n\n\nfunction setResources(rsrcs) {\n  return store.putResources(rsrcs);\n}\n\n\nfunction getResourceColumns(domains) {\n  return getResources(domains).then(rsrcs => {\n    return rsrcs.map(rsrc => {\n      return rsrc.columns.map(col => {\n        col.domain = rsrc.domain;\n        col.key = def.dataSourceId(rsrc.domain, rsrc.id, col.key);\n        col.entity = rsrc.entity;\n        if (!col.hasOwnProperty('tags')) col.tags = rsrc.tags;\n        return col;\n      });\n    }).extend();\n  });\n}\n\n\nfunction getDataSourceColumns(domain, ids) {\n  return store.getResources([domain]).then(rsrcs => {\n    return ids.map(d => rsrcs.find(e => e.id === d).columns)\n      .extend();\n  });\n}\n\n\n// Datatable on local IndexedDB\n\nfunction getAllTables() {\n  return store.getAllItems();\n}\n\n\nfunction getTablesByFormat(format) {\n  return store.getItemsByFormat(format);\n}\n\n\nfunction getTable(tableId) {\n  return store.getItemById(tableId);\n}\n\n\nfunction getRecords(tableId) {\n  return store.getItemById(tableId)\n    .then(tbl => tbl.records);\n}\n\n\nfunction getCurrentTable() {\n  const q = getGlobalConfig('urlQuery');\n  if (!q.hasOwnProperty('id')) return Promise.resolve();\n  return store.getItemById(q.id);\n}\n\n\nfunction getCurrentRecords() {\n  return getCurrentTable().then(tbl => tbl.records);\n}\n\n\nfunction setColumnsToShow(updates) {\n  return store.updateItem(getGlobalConfig('urlQuery').id, item => {\n    item.columns.forEach((col, i) => {\n      col.visible = updates.visibles.includes(col.key);\n      col.sort = updates.sorts[i];\n      col.digit = updates.digits[i];\n    });\n  });\n}\n\n\nfunction joinColumn(mapping, tableId=globalConfig.urlQuery.id) {\n  const cols = mapping.hasOwnProperty('column') ? mapping.column : mapping.columns;\n  return store.updateItem(tableId, item => {\n    item.records\n      .filter(rcd => mapping.mapping.hasOwnProperty(rcd[mapping.key]))\n      .forEach(rcd => {\n        if (mapping.hasOwnProperty('column')) {\n          rcd[mapping.column.key] = mapping.mapping[rcd[mapping.key]];\n        } else {\n          mapping.columns.forEach((col, i) => {\n            rcd[col.key] = mapping.mapping[rcd[mapping.key]][i];\n          });\n        }\n      });\n    item.columns = item.columns.concat(cols).unique('key');\n    item.lastUpdated = mapping.lastUpdated;\n  });\n}\n\n\nfunction updateTableAttribute(tblID, key, value) {\n  return store.updateItem(tblID, item => {\n    item[key] = value;\n  });\n}\n\n\nfunction insertTable(data) {\n  return store.putItem(data);\n}\n\n\nfunction updateTable(data) {\n  if (data === undefined) return Promise.resolve();  // No update\n  if (data.status === 'Failure') {  // No data found on server\n    return updateTableAttribute(data.id, 'status', 'Failure');\n  }\n  // update\n  return store.updateItem(data.id, item => {\n    const update = {\n      responseDate: data.responseDate,\n      records: data.records,\n      columns: data.columns,\n      recordCount: data.recordCount,\n      searchDoneCount: data.searchDoneCount,\n      execTime: data.execTime,\n      progress: data.progress,\n      status: data.status,\n    };\n    if (data.hasOwnProperty('lastUpdated')) {\n      update.lastUpdated = data.lastUpdated;\n    }\n    Object.assign(item, update);\n  });\n}\n\n\nfunction deleteTable(id) {\n  return store.deleteItem(id);\n}\n\n\nfunction reset() {\n  return store.reset();\n}\n\n\nexport default {\n  getGlobalConfig, setGlobalConfig,\n  localChemInstance, getFetcher, fetcherInstances,\n  dataFetcherInstances, dataFetcherDomains,\n  getResources, setResources, getResourceColumns, getDataSourceColumns,\n  getAllTables, getTablesByFormat, getTable, getRecords,\n  getCurrentTable, getCurrentRecords,\n  setColumnsToShow, joinColumn,\n  updateTableAttribute, insertTable, updateTable,\n  deleteTable, reset\n};\n","\nimport {default as store} from './store/StoreConnection.js';\n\nconst localServer = store.localChemInstance();\n\n\nfunction initialize() {\n  if ('serviceWorker' in navigator && !debug) {\n    navigator.serviceWorker\n      .register('sw.js')\n      .then(registration => {\n        console.info(\n          'ServiceWorker registration successful with scope: ',\n          registration.scope\n        );\n      }).catch(err => {\n        console.info('ServiceWorker registration failed: ', err);\n      });\n  } else if (debug) {\n    console.info('Off-line mode is disabled for debugging');\n  } else {\n    console.info('Off-line mode is not supported');\n  }\n  const serverTmpl = localServer.templates().then(res => {\n    store.setGlobalConfig('templates', res.templates);\n  });\n  const serverConfig = localServer.status().then(res => {\n    store.setGlobalConfig('server', res);\n  });\n  // TODO: skip loader if there is already resources in the store\n  // 1. collate resource version\n  // 2. if no local resource or server resource is newer, fetch\n  const rsrcFetched = store.fetcherInstances()\n    .map(api => api.getResources())\n    .extendAsync().then(res => {\n      const indexed = res.map((e, i) => {\n        e.idx = i;\n        return e;\n      });\n      return store.setResources(indexed);\n    });\n  return Promise.all([serverTmpl, serverConfig, rsrcFetched]);\n}\n\n\nfunction loader() {\n  if (document.location.protocol === \"file:\") {\n    console.info('Off-line mode (local file)');\n    store.setGlobalConfig('onLine', false);\n    return Promise.resolve();\n  }\n  if ('onLine' in navigator) {\n    if (!navigator.onLine) {\n      console.info('Off-line mode (no internet connection)');\n      store.setGlobalConfig('onLine', false);\n      return Promise.resolve();\n    }\n  }\n  return fetch(`${localServer.baseURL}favicon.ico`)\n    .then(() => {\n      // HTTP 404\n      store.setGlobalConfig('onLine', true);\n      return initialize();\n    }).catch(() => {\n      console.info('Off-line mode (server not responding)');\n      store.setGlobalConfig('onLine', false);\n      return Promise.resolve();\n    });\n}\n\n\nexport default {\n  loader\n};\n","\n/** @module formatValue */\n\nimport d3 from 'd3';\n\n\n/**\n * Format number\n * @param {object} value - value\n * @param {string} type - si | scientific | rounded | raw\n */\nfunction formatNum(value, type) {\n  const conv = {\n    scientific: \".3e\",\n    si: \".3s\",\n    rounded: \".3r\"\n  };\n  if (type === 'raw') return value;\n  if (value === undefined || value === null || Number.isNaN(value)) return '';\n  return value == parseFloat(value) ? d3.format(conv[type])(value) : value;\n}\n\nfunction partialMatch(query, target) {\n  if (target === undefined || target === null || target === '') return false;\n  return target.toString().toUpperCase()\n    .indexOf(query.toString().toUpperCase()) !== -1;\n}\n\nfunction numericAsc(a, b) {\n  const fa = parseFloat(a);\n  const fb = parseFloat(b);\n  if (isNaN(fa) || isNaN(fb)) {\n    return String(b).localeCompare(String(a));\n  }\n  return fb - fa;\n}\n\n\nfunction numericDesc(a, b) {\n  return numericAsc(b, a);\n}\n\n\nfunction textAsc(a, b) {\n  return String(b).localeCompare(String(a));\n}\n\n\nfunction textDesc(a, b) {\n  return textAsc(b, a);\n}\n\n\nexport default {\n  formatNum, partialMatch,\n  numericAsc, numericDesc, textAsc, textDesc\n};\n","\n/** @module component */\n\nimport d3 from 'd3';\nimport {default as fmt} from '../helper/formatValue.js';\n\n\nfunction selectOptions(selection, data, key, text) {\n  const options = selection.selectAll('option')\n    .data(data, key);\n  options.exit().remove();\n  options.enter().append('option')\n    .merge(options)\n      .attr('value', key)\n      .text(text);\n}\n\n\nfunction checkboxList(selection, data, name, key, text) {\n  const items = selection.selectAll('li').data(data, key);\n  items.exit().remove();\n  const entered = items.enter().append('li')\n    .attr('class', 'form-check')\n    .append('label');\n  entered.append('input');\n  entered.append('span');\n  const updated = entered.merge(items.select('label'))\n    .attr('class', 'form-check-label');\n  updated.select('input')\n    .attr('type', 'checkbox')\n    .attr('class', 'form-check-input')\n    .attr('name', name)\n    .attr('value', key);\n  updated.select('span')\n    .text(text);\n}\n\n\nfunction createTable(selection, tbl) {\n  // Header\n  if (!selection.select('thead').size()) {\n    selection.append('thead').append('tr');\n  }\n  // Records\n  if (!selection.select('tbody').size()) {\n    selection.append('tbody');\n  }\n  const cols = tbl.columns\n    .filter(e => !e.hasOwnProperty('visible') || e.visible !== false\n  );\n  const header = selection.select('thead tr').selectAll('th')\n    .data(cols, d => d.key);\n  header.exit().remove();\n  header.enter().append('th')\n    .merge(header)\n      .text(d => d.hasOwnProperty('name') ? d.name : d.key);\n}\n\n\nfunction updateTableRecords(selection, rcds, keyFunc) {\n  const header = selection.select('thead tr').selectAll('th')\n    .data();\n  const rowSelection = selection.select('tbody').selectAll('tr')\n    .data(rcds, keyFunc);\n  rowSelection.exit().remove();\n  const rowEntered = rowSelection.enter().append('tr');\n  rowEntered.selectAll('td')\n    .data(d => header.map(e => d[e.key]))\n    .enter().append('td');\n  rowEntered.merge(rowSelection)\n    .selectAll('td')\n    .classed('align-middle', true)\n    .html((d, i) => {\n      if (d === undefined) return '';\n      if (header[i].valueType === 'plot') return '[plot]';\n      if (header[i].valueType === 'image') return '[image]';\n      if (header[i].hasOwnProperty('digit') && header[i].digit !== 'raw') {\n        return fmt.formatNum(d, header[i].digit);\n      }\n      return d;\n    });\n}\n\n\nfunction appendTableRows(selection, rcds, keyFunc) {\n  const newRcds = selection.select('tbody').selectAll('tr').data();\n  Array.prototype.push.apply(newRcds, rcds);\n  updateTableRecords(selection, newRcds, keyFunc);\n}\n\n\nfunction addSort(selection) {\n  selection.select('thead tr').selectAll('th')\n    .filter(d => d.sort !== 'none')\n    .append('span').append('a')\n      .attr('id', d => `sort-${d.key}`)\n      .text('^v')\n      .style('display', 'inline-block')\n      .style('width', '30px')\n      .style('text-align', 'center')\n    .on('click', d => {\n      const isAsc = d3.select(`#sort-${d.key}`).text() === 'v';\n      const isNum = !d.hasOwnProperty('sort') || d.sort === 'numeric';\n      const cmp = isAsc\n        ? (isNum ? fmt.numericAsc : fmt.textAsc)\n        : (isNum ? fmt.numericDesc : fmt.textDesc);\n      selection.select('tbody').selectAll('tr')\n        .sort((a, b) => cmp(a[d.key], b[d.key]));\n      d3.select(`#sort-${d.key}`)\n        .text(isAsc ? '^' : 'v');\n    });\n}\n\n\nfunction formatNumbers(selection) {\n  // DEPRECATED: no longer used\n  selection.select('thead tr').selectAll('th')\n    .each((col, colIdx) => {\n      if (!col.hasOwnProperty('digit') || col.digit === 'raw') return;\n      selection.select('tbody').selectAll('tr')\n        .selectAll('td')\n          .filter((d, i) => i === colIdx)\n          .text(d => fmt.formatNum(d, col.digit));\n    });\n}\n\n\nexport default {\n  selectOptions, checkboxList,\n  createTable, updateTableRecords,\n  appendTableRows, addSort, formatNumbers\n};\n","\nimport d3 from 'd3';\n\nimport {default as def} from './helper/definition.js';\nimport {default as loader} from './Loader.js';\nimport {default as cmp} from './component/Component.js';\nimport {default as store} from './store/StoreConnection.js';\n\nconst localServer = store.localChemInstance();\n\n\nfunction actionTable(selection, tbl) {\n  tbl.records.forEach(rcd => {\n    rcd.action = `<a role=\"button\" class=\"btn btn-secondary btn-sm\" href=\"${tbl.app}?id=${rcd.id}\" target=\"_blank\">Open</a>`;\n    if (def.fetchable(tbl)) {\n      rcd.action += `<button type=\"button\" class=\"btn btn-warning btn-sm\" disabled>Running</button>`;\n    } else {\n      rcd.action += `<button type=\"button\" class=\"btn btn-warning btn-sm delete-item\" data-toggle=\"modal\" data-target=\"#confirm-dialog\" data-tblid=\"${rcd.id}\" data-tblname=\"${rcd.name}\">Delete</button>`;\n    }\n  });\n  d3.select(selection).call(cmp.createTable, tbl)\n    .call(cmp.updateTableRecords, tbl.records, d => d.id);\n  d3.selectAll('tr button.delete-item')\n    .on('click', function() {\n      const id = d3.select(this).attr('data-tblid');\n      const name = d3.select(this).attr('data-tblname');\n      d3.select('#confirm-message')\n        .text(`Are you sure you want to delete ${name} ?`);\n      d3.select('#confirm-submit')\n        .on('click', () => store.deleteTable(id).then(render));\n    });\n}\n\n\nfunction renderTableStatus(tbls) {\n  const data = {\n    app: 'datatable.html',\n    columns: [\n      {key: 'name'},\n      {key: 'responseDate'},\n      {key: 'status'},\n      {key: 'records'},\n      {key: 'action'}\n    ]};\n  data.records = tbls.map(tbl => {\n    if (!tbl.hasOwnProperty('status')) tbl.status = 'Completed';\n    return {\n      \"id\": tbl.id,\n      \"name\": tbl.name,\n      \"responseDate\": tbl.responseDate,\n      \"status\": tbl.status,\n      \"records\": tbl.records.length,\n    };\n  });\n  actionTable('#local-tables', data);\n}\n\n\nfunction renderGraphStatus(grfs) {\n  const data = {\n    app: 'graph.html',\n    columns: [\n      {key: 'name'},\n      {key: 'responseDate'},\n      {key: 'nodeTableId'},\n      {key: 'status'},\n      {key: 'edges'},\n      {key: 'action'}\n    ]};\n  data.records = grfs.map(grf => {\n    if (!grf.hasOwnProperty('status')) grf.status = 'Completed';\n    return {\n      \"id\": grf.id,\n      \"name\": grf.name,\n      \"responseDate\": grf.responseDate,\n      \"nodeTableId\": grf.nodeTableId,\n      \"status\": grf.status,\n      \"edges\": grf.records.length,\n    };\n  });\n  actionTable('#local-graphs', data);\n}\n\n\nfunction renderServerStatus(data) {\n  d3.select('#server-calc').call(cmp.createTable, data.calc)\n    .call(cmp.updateTableRecords, data.calc.records, d => d._index);\n  const server = {\n    columns: [{key: 'key'}, {key: 'value'}],\n    records: []\n  };\n  Object.entries(data).filter(e => e[0] !== 'calc')\n    .forEach(e => server.records.push({key: e[0], value: e[1]}));\n  d3.select('#server-status').call(cmp.createTable, server)\n    .call(cmp.updateTableRecords, server.records, d => d._index);\n}\n\n\nfunction render() {\n  if (store.getGlobalConfig('onLine')) {\n    renderServerStatus(store.getGlobalConfig('server'));\n  }\n  return Promise.all([\n    store.getTablesByFormat('datatable').then(renderTableStatus),\n    store.getTablesByFormat('connection').then(renderGraphStatus)\n  ]);\n}\n\n\nd3.select('#refresh-all')\n  .on('click', () => {\n    return store.getAllTables().then(tbls => {\n      const tasks = tbls.map(tbl => {\n        if (!def.fetchable(tbl)) return Promise.resolve();\n        const query = {id: tbl.id, command: 'fetch'};\n        return localServer.getRecords(query).then(store.updateTable);\n      });\n      return Promise.all(tasks);\n    }).then(render);\n  });\n\n\nd3.select('#reset-local')\n  .on('click', () => {\n    d3.select('#confirm-message')\n      .text('Are you sure you want to delete all local tables and reset the datastore ?');\n    d3.select('#confirm-submit')\n      .on('click', () => store.reset().then(render));\n  });\n\n\n\nfunction run() {\n  return loader.loader().then(render);\n}\nrun();\n","\n/** @module definition */\n\nfunction fetchable(tbl) {\n  return ['In progress', 'Queued', 'Aborting'].includes(tbl.status);\n}\n\n\nfunction abortRequestable(tbl) {\n  return ['In progress', 'Queued'].includes(tbl.status);\n}\n\n\nfunction conclike(col) {\n  return col.hasOwnProperty('valueType')\n    && ['AC50', 'IC50', 'ED50'].includes(col.valueType);\n}\n\n\nfunction dataSourceId(domain, resource, column) {\n  return [domain, resource, column]\n    .map(e => e.capitalize())\n    .join('');  // DomainResourceColumn\n}\n\n\nexport default {\n  fetchable, abortRequestable, conclike, dataSourceId\n};\n","\nimport Dexie from 'Dexie';\n\n// TODO: can indexed records improve query performance ?\n// TODO: remove app table. no longer used\n\nconst schema = {\n  app: 'key',\n  items: 'id, format, responseDate',\n  resources: 'idx, id'\n};\n\nlet idb = new Dexie('Store');\nidb.version(1).stores(schema);\n\n\nfunction getAppSetting(key) {\n  return idb.app.where('key').equals(key).first()\n    .then(res => {\n      if (res === undefined) return undefined;\n      return res.value;\n    });\n}\n\n\nfunction putAppSetting(k, v) {  // returns id in success\n  return idb.app.put({ key: k, value: v });\n}\n\n\nfunction getResources() {\n  return idb.resources.orderBy('idx')\n    .toArray();\n}\n\n\nfunction putResources(data) { // returns last id in success\n  return idb.resources.bulkPut(data);\n}\n\n\nfunction getAllItems() {\n  return idb.items.orderBy('responseDate').reverse()\n    .toArray();\n}\n\n\nfunction getItemsByFormat(format) {\n  return idb.items.where('format').equals(format).reverse()\n    .sortBy('responseDate');\n}\n\n\nfunction getItemById(tableId) {\n  return idb.items.where('id').equals(tableId).first();\n}\n\n\nfunction updateItem(tableId, callback) {  // returns num of updated items\n  return idb.items.where('id').equals(tableId).modify(callback);\n}\n\n\nfunction deleteItem(tableId) { // returns num of deleted items\n  return idb.items.where('id').equals(tableId).delete();\n}\n\n\nfunction putItem(data) { // returns id in success\n  return idb.items.put(data);\n}\n\n\nfunction reset() {\n  // Try this before tackling with local db troubles\n  return idb.delete().then(() => {\n    idb = new Dexie('Store');\n    idb.version(1).stores(schema);\n  });\n}\n\nexport default {\n  getAppSetting, putAppSetting, getResources, putResources,\n  getAllItems, getItemsByFormat, getItemById,\n  updateItem, deleteItem, putItem, reset\n};\n","\nexport default class Fetcher {\n  constructor() {\n    this.baseURL = \"\";\n    this.available = false;\n  }\n\n  xhrRequest(url, formData=null, options={}) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('method' in options ? options.method : 'POST', url);\n      xhr.responseType = 'responseType' in options ? options.responseType : 'json';\n      xhr.withCredentials = 'withCredentials' in options ? options.withCredentials : false;\n      xhr.onload = () => {\n        if (xhr.status !== 200) {\n          reject(xhr);\n        } else {\n          resolve(xhr.response);\n        }\n      };\n      xhr.send(formData);\n    });\n  }\n\n  now() {\n    const now = new Date();\n    return now.toString();\n  }\n\n  getResources() {\n    // required\n  }\n\n  formatResult(cols, data) {\n    // to be called by store.updateTable\n    // required for chemical domain\n    data.lastUpdated = this.now();\n    return data;\n  }\n\n  getRecords() {\n    // required\n  }\n\n  getRecordsByCompound() {\n    // required for activity domain\n  }\n\n  getMapping() {\n    // required for activity domain\n  }\n\n  getGraphEdges() {\n\n  }\n}\n","\nimport {default as Fetcher} from './Fetcher.js';\n\n\nexport class LocalServerActivity extends Fetcher {\n  constructor() {\n    super();\n    this.baseURL = './';\n    this.domain = 'activity';\n    this.entities = [];\n  }\n\n  serializedRequest(url, query={}) {\n    const formData = new FormData();\n    formData.set('query', JSON.stringify(query));\n    return fetch(`${this.baseURL}${url}`,\n      {method: 'post', body: formData, credentials: 'include'});\n  }\n\n  request(url, query={}) {\n    const formData = new FormData();\n    const qmap = new Map(Object.entries(query));\n    qmap.forEach((v, k) => {\n      if (Array.isArray(v)) {\n        v.forEach(e => formData.append(k, e));\n      } else {\n        formData.set(k, v);\n      }\n    });\n    return fetch(`${this.baseURL}${url}`,\n      {method: 'post', body: formData, credentials: 'include'});\n  }\n\n  getResources() {\n    return this.request('schema', {domain: this.domain})\n      .then(res => res.json())\n      .then(json => {\n        json.resources.forEach(rsrc => {\n          rsrc.domain = this.domain;\n          rsrc.columns.forEach(col =>{\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            if (!col.hasOwnProperty('method')) col.method = 'sql';\n            col.visible = true;\n          });\n          this.entities.push(rsrc.entity);\n        });\n        this.available = true;\n        return json.resources;\n      });\n  }\n\n  getRecords(queries) {\n    return this.serializedRequest('sql', queries)\n      .then(res => res.json())\n      .then(json => {\n        json.domain = this.domain;\n        return json;\n      });\n  }\n\n  getRecordsByCompound(compound) {\n    // TODO: this.entities\n    const query = {\n      method: 'sql',\n      targets: this.entities,\n      key: 'ID',\n      values: [compound],\n      operator: 'eq'\n    };\n    return this.getRecords(query);\n  }\n\n  getMapping(ids, column) {\n    const query = {\n      method: 'sql',\n      targets: [column.entity],\n      key: 'ID',\n      values: ids,\n      operator: 'fm'\n    };\n    return this.serializedRequest('sql', query)\n      .then(res => res.json())\n      .then(json => {\n        const mapping = {};\n        json.records.filter(row => row.hasOwnProperty(column.dataColumn))\n          .forEach(row => { mapping[row.ID] = row[column.dataColumn]; });\n        return {\n          key: query.key,\n          column: column,\n          mapping: mapping,\n          lastUpdated: this.now(),\n        };\n      });\n  }\n\n  status() {\n    return this.request('server').then(res => res.json());\n  }\n\n  templates() {\n    return this.request('templates').then(res => res.json());\n  }\n\n  strprev(query) {\n    return this.serializedRequest('strprev', query).then(res => res.text());\n  }\n\n  exportExcel(query) {\n    return this.request('xlsx', query).then(res => res.blob());\n  }\n\n  exportSDFile(query) {\n    return this.request('exportsdf', query).then(res => res.text());\n  }\n\n  reportPreview(query) {\n    return this.request('reportprev', query).then(res => res.json());\n  }\n\n  report(query) {\n    return this.request('report', query).then(res => res.blob());\n  }\n}\n\n\nexport class LocalServerChemical extends LocalServerActivity {\n  constructor() {\n    super();\n    this.domain = 'chemical';\n    this.hiddenColumns = [\"_mw\", \"_mw_wo_sw\", \"_formula\", \"_logp\", \"_nonH\"];\n  }\n\n  formatResult(cols, data) {\n    if (cols.length === 0) {  // sdf\n      data.columns.forEach(col => {\n        col.visible = this.hiddenColumns.includes(col.key) ? false : true;\n      });\n      return data;\n    }\n    Array.prototype.push.apply(data.columns, cols);\n    if (data.hasOwnProperty('extraColumns')) {\n      Array.prototype.push.apply(data.columns, data.extraColumns);\n      delete data.extraColumns;\n    }\n    data.columns.forEach(col => {\n      if (!col.hasOwnProperty('name')) col.name = col.key;\n      if (col.key === data.query.key) {\n        col.visible = true;  // Search key\n      } else {\n        col.visible = this.hiddenColumns.includes(col.key) ? false : true;\n      }\n    });\n    data.lastUpdated = this.now();\n    return data;\n  }\n\n  getResources() {\n    return this.request('schema', {domain: this.domain})\n      .then(res => res.json())\n      .then(json => {\n        json.resources.forEach(rsrc => {\n          rsrc.domain = this.domain;\n          rsrc.columns.forEach(col =>{\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            if (!col.hasOwnProperty('method')) col.method = 'chemsql';\n            col.visible = true;\n          });\n        });\n        this.available = true;\n        return json.resources;\n      });\n  }\n\n  getRecords(query) {\n    let url;\n    if (query.hasOwnProperty('command')) {\n      url = 'rows';\n    } else if (query.hasOwnProperty('nodeTableId')) {\n      url = 'graph';\n    } else if (['chemsql', 'sql'].includes(query.method)) {\n      url = 'sql';\n    } else {\n      url = 'compute';\n    }\n    return this.serializedRequest(url, query)\n      .then(res => res.json())\n      .then(json => {\n        json.domain = this.domain;\n        return json;\n      });\n  }\n\n  importSDF(query) {\n    return this.request('sdf', query)\n    .then(res => res.json())\n    .then(json => {\n      json.domain = this.domain;\n      json.columns.forEach(col =>{\n        col.visible = this.hiddenColumns.includes(col.key) ? false : true;\n      });\n      const now = new Date();\n      json.lastUpdated = now.toString();\n      return json;\n    });\n  }\n}\n","\nimport {default as Fetcher} from './Fetcher.js';\n\n\nexport class ScreenerFitting extends Fetcher {\n  constructor() {\n    super();\n    this.resourceFile = 'screener_fitting.yaml';\n    this.domain = null;\n    this.baseURL = null;\n  }\n\n  getResources() {\n    const formData = new FormData();\n    formData.set('filename', this.resourceFile);\n    return fetch('source', {method: 'post', body: formData, credentials: 'include'})\n      .then(res => res.json())\n      .then(json => {\n        if (json.hasOwnProperty('enabled') && json.enabled === false) return;\n        this.available = true;\n        this.domain = json.domain;\n        this.baseURL = json.url;\n        return json.resources.map(rsrc => {\n          rsrc.domain = json.domain;\n          rsrc.entity = `${rsrc.qcsRefId}:${rsrc.layerIndex}`;\n          delete rsrc.qcsRefId;\n          delete rsrc.layerIndex;\n          rsrc.columns.forEach(col => {\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            col.visible = true;\n          });\n          return rsrc;\n        });\n    });\n  }\n\n  request(queryString) {\n    return fetch(`${this.baseURL}${queryString}`, {\n      method: 'GET',\n      credentials : 'include'\n    }).then(res => res.json());\n  }\n\n  requestRecords(queryString) {\n    return this.request(queryString)\n      .then(json => {\n        const rcds = json.compounds.map(c => {\n          return {\n            ID: c.compoundId,\n            qcsRefId: c.qcsRefId,\n            layerIndex: c.layerIndex,\n            drcPlot: c.fitting.drcPlot,\n            AC50: c.fitting.linearAC50,\n            hill: Math.round(c.fitting.hillCoefficient * 100) / 100\n          };\n        });\n        return { records: rcds };\n      });\n  }\n\n  getRecords(q) {\n    const joinedIds = q.qcsRefIds.join('%2C');\n    const queryString = `/compounds?qcsRefIds=${joinedIds}\\\n&layerIndices=${q.layerIndex - 1}\\\n&fields=compoundId%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n    return this.requestRecords(queryString);\n  }\n\n  getRecordsByCompound(compound) {\n    const queryString = `/compounds?q=compoundId%3A${compound}\\\n&fields=compoundId%2CqcsRefId%2ClayerIndex\\\n%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n    return this.requestRecords(queryString);\n  }\n\n  getMapping(ids, column) {\n    const refid_layer = column.entity.split(':');\n    const query = {\n      qcsRefId: refid_layer[0],\n      layerIndex: parseInt(refid_layer[1])\n    };\n    return this.getRecords(query).then(res => {\n      const mapping = {};\n      res.records.filter(row => ids.includes(row.ID))\n        .forEach(row => { mapping[row.ID] = row[column.dataColumn]; });\n      return {\n        key: 'ID',\n        column: column,\n        mapping: mapping,\n        lastUpdated: this.now()\n      };\n    });\n  }\n\n  getDrcPlot(compoundId, plotId, min = -20, max = 120) {\n    // compoundResult.fitting.drcPlot -> drcPlots/idstring\n    // returns image/png\n    const queryString = `/${plotId}?width=180&height=180&title=compoundId\\\n&activityRangeMin=${min}&activityRangeMax=${max}`;\n    return this.request(queryString);\n  }\n\n  getQcsInfo(qcsRefIds) {\n    const ids = qcsRefIds.map(e => `qcsRefId:${e}`).join(' OR ');\n    const queryString = `/qcSessions?q=${ids}`;\n    return this.request(queryString).then(res => res.qcSessions);\n  }\n}\n\n\nexport class ScreenerRawValue extends ScreenerFitting{\n  constructor() {\n    super();\n    this.resourceFile = 'screener_rawvalue.yaml';\n  }\n\n  getResources() {\n    const formData = new FormData();\n    formData.set('filename', this.resourceFile);\n    return fetch('source', {method: 'post', body: formData, credentials: 'include'})\n      .then(res => res.json())\n      .then(json => {\n        if (json.hasOwnProperty('enabled') && json.enabled === false) return;\n        this.available = true;\n        this.domain = json.domain;\n        this.baseURL = json.url;\n        return json.resources.map(rsrc => {\n          rsrc.domain = json.domain;\n          rsrc.entity = `${rsrc.qcsRefId}:${rsrc.layerIndex}`;\n          delete rsrc.qcsRefId;\n          delete rsrc.layerIndex;\n          rsrc.columns.forEach(col => {\n            col.key = 'rawValue';\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            col.visible = true;\n          });\n          return rsrc;\n        });\n      });\n  }\n\n  requestRecords(queryString, pred) {\n    return this.request(queryString).then(res => {\n      const rcds = res.plates.filter(plt => plt.wells.hasOwnProperty('compoundIds'))\n        .map(plt => {\n          return plt.wells.compoundIds.map((c, i) => {\n            return {\n              ID: c,\n              qcsRefId: plt.qcsRefId,\n              layerIndex: plt.layerIndex,\n              rawValue: plt.wells.rawValues[i]\n            };\n          }).filter(pred);\n        }).extend();\n      return { records: rcds };\n    });\n  }\n\n  getRecords(q) {\n    const joinedIds = q.qcsRefIds.join('%2C');\n    const queryString = `/plates?qcsRefIds=${joinedIds}\\\n&layerIndices=${q.layerIndex - 1}\\\n&limit=200\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n    return this.requestRecords(queryString, e => e.ID !== null);\n  }\n\n  getRecordsByCompound(compound) {\n    const queryString = `/plates?q=wells.compoundIds%3A${compound}\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n    return this.requestRecords(queryString, e => e.ID === compound);\n  }\n}\n\n\n/*\nfunction request(query) {\n  return store.getDBResources('activity')\n    .then(rsrc => {\n      const url = `${rsrc.find(e => e.id === 'screenerapi').url}${query}`;\n      return server.request(url, null, {\n        method: 'GET',\n        responseType: 'json',\n        withCredentials : true\n      });\n    });\n}\n\n\nfunction getRawValuesByQcs(qcsRefIds, layerIndex) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/plates?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&limit=200\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n  return request(query).then(res => {\n    const rcds = [];\n    res.plates.forEach(plt => {\n      if (!plt.wells.hasOwnProperty('compoundIds')) return;  // unmapped\n      const values = plt.wells.compoundIds.map((c, i) => {\n        if (c !== null) return { ID: c, rawValue: plt.wells.rawValues[i]};\n      }).filter(e => e !== undefined);\n      Array.prototype.push.apply(rcds, values);\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getRawValuesByQcs = getRawValuesByQcs;\n\n\nfunction getRawValuesMappingColumn(qcsRefIds, layerIndex, compoundIds) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/plates?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&limit=200\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n  return request(query).then(res => {\n    const mapping = {};\n    res.plates.forEach(plt => {\n      if (!plt.wells.hasOwnProperty('compoundIds')) return;  // unmapped\n      plt.wells.compoundIds.forEach((c, i) => {\n        if (compoundIds.includes(c)) {\n          mapping[c] = plt.wells.rawValues[i];\n        }\n      });\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      mapping: mapping\n    };\n  });\n}\nexports.getRawValuesMappingColumn = getRawValuesMappingColumn;\n\n\nfunction getRawValuesByCompound(compoundId) {\n  const query = `/plates?q=wells.compoundIds%3A${compoundId}\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n  return request(query).then(res => {\n    const rcds = [];\n    res.plates.forEach(plt => {\n      if (!plt.wells.hasOwnProperty('compoundIds')) return;  // unmapped\n      const i = plt.wells.compoundIds.findIndex(c => c === compoundId);\n      rcds.push({\n        qcsRefId: plt.qcsRefId,\n        layerIndex: plt.layerIndex,\n        rawValue: plt.wells.rawValues[i]\n      });\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getRawValuesByCompound = getRawValuesByCompound;\n\n\nfunction getFittingByQcs(qcsRefIds, layerIndex) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/compounds?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&fields=compoundId%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n  return request(query).then(res => {\n    const rcds = res.compounds.map(c => {\n      return {\n        ID: c.compoundId,\n        drcPlot: c.fitting.drcPlot,\n        AC50: c.fitting.linearAC50,\n        hill: Math.round(c.fitting.hillCoefficient * 100) / 100\n      };\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getFittingByQcs = getFittingByQcs;\n\n\nfunction getAC50MappingColumn(qcsRefIds, layerIndex, compoundIds) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/compounds?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&fields=compoundId%2Cfitting.linearAC50`;\n  return request(query).then(res => {\n    const mapping = {};\n    res.compounds.forEach(c => {\n      if (compoundIds.includes(c.compoundId)) {\n        mapping[c] = c.fitting.linearAC50;\n      }\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      mapping: mapping\n    };\n  });\n}\nexports.getAC50MappingColumn = getAC50MappingColumn;\n\n\nfunction getFittingByCompound(compoundId) {\n  const query = `/compounds?q=compoundId%3A${compoundId}\\\n&fields=compoundId%2CqcsRefId%2ClayerIndex\\\n%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n  return request(query).then(res => {\n    const rcds = res.compounds.map(c => {\n      return {\n        ID: c.compoundId,\n        drcPlot: c.fitting.drcPlot,\n        AC50: c.fitting.linearAC50,\n        hill: Math.round(c.fitting.hillCoefficient * 100) / 100,\n        qcsRefId: c.qcsRefId,\n        layerIndex: c.layerIndex\n      };\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getFittingByCompound = getFittingByCompound;\n\n\nfunction getDrcPlot(compoundId, plotId, min = -20, max = 120) {\n  const query = `/${plotId}?width=180&height=180&title=compoundId\\\n&activityRangeMin=${min}&activityRangeMax=${max}`;\n  return request(query);\n}\nexports.getDrcPlot = getDrcPlot;\n\n\nfunction getQcsInfo(qcsRefIds) {\n  const ids = qcsRefIds.map(e => `qcsRefId:${e}`).join(' OR ');\n  const query = `/qcSessions?q=${ids}`;\n  return request(query).then(res => res.qcSessions);\n}\nexports.getQcsInfo = getQcsInfo;\n\nfunction getAllResults(qcsRefId, layerIdx) {\n  const query = `/plates?qcsRefIds=${qcsRefId}\\\n&layerIndices=${layerIdx}\\\n&limit=200\\\n&fields=barcode%2CzPrime%2CwellTypes%2Cwells.rawValues%2Cwells.compoundIds`;\n  return request(query, res => res);\n}\nexports.getAllResults = getAllResults;\n\n\nfunction getPlateStats(allResults) {\n  const plates = allResults.plates;\n  const parsed = plates.map(p => {\n    const lowMean = p.wellTypes.NEUTRAL_CONTROL.mean;\n    const lowStdDev = p.wellTypes.NEUTRAL_CONTROL.sd;\n    const highMean = p.wellTypes.INHIBITOR_CONTROL.mean;\n    const highStdDev = p.wellTypes.INHIBITOR_CONTROL.sd;\n    return {\n      barcode: p.barcode,\n      lowCtrlMean: lowMean,\n      lowCtrlStdDev: lowStdDev,\n      lowCtrlCV: lowStdDev / lowMean * 100,\n      highCtrlMean: highMean,\n      highCtrlStdDev: highStdDev,\n      highCtrlCV: highStdDev / highMean * 100,\n      SignalBackground: lowMean / highMean,\n      zPrime: p.zPrime\n    };\n  });\n  return parsed;\n}\nexports.getPlateStats = getPlateStats;\n\n\nfunction getWellValues(allResults) {\n  const plates = allResults.plates;\n  const results = {};\n  plates.forEach(p => {\n    p.wells.compoundIds.forEach((value, i) => {\n      if (value !== null) {\n        results[value] = p.wells.rawValues[i];\n      }\n    });\n  });\n  return results;\n}\nexports.getWellValues = getWellValues;\n\n\nfunction getFirstPlateValues(qcsRefId, layerIdxs) {\n  const query = `/plates?qcsRefIds=${qcsRefId}\\\n&layerIndices=${layerIdxs}\\\n&q=plateIndex%3A0\\\n&fields=layerIndex%2CzPrime%2CwellTypes%2Cwells.rawValues%2Cwells.compoundIds`;\n  return request(query, res => {\n    const results = {};\n    res.plates.forEach(p => {\n      const idx = p.layerIndex;\n      p.wells.compoundIds.forEach(value => {\n        if (value !== null) {\n          if (!results.hasOwnProperty(value)) {\n            results[value] = {};\n          }\n          results[value][idx] = p.wells.rawValues[idx];\n        }\n      });\n    });\n  });\n}\nexports.getFirstPlateValues = getFirstPlateValues;\n*/\n","\nimport {ScreenerFitting, ScreenerRawValue} from './Screener.js';\n\n\nexport class ScreenerFittingStub extends ScreenerFitting {\n  constructor() {\n    super();\n    this.resourceFile = 'screener_fitting_stub.yaml';\n  }\n\n  fittingStub(q) {\n    if (typeof q.qcsRefId !== 'string') throw `${q.qcsRefId} is not a string`;\n    if (typeof q.layerIndex !== 'number') throw `${q.layerIndex} is not a number`;\n    return [\n      {ID: 'DB00189', drcPlot: 'dummy1', AC50: 2.1e-6, hill: 1.1, source: 'target1_validation'},\n      {ID: 'DB00193', drcPlot: 'dummy2', AC50: 4.2e-6, hill: null, source: 'target1_validation'},\n      {ID: 'DB00203', drcPlot: 'dummy3', AC50: 1.0e-5, hill: 0.9, source: 'target1_validation'},\n      {ID: 'DB00865', drcPlot: 'dummy4', AC50: 8.8e-8, hill: 2.1, source: 'target1_validation'},\n      {ID: 'DB01143', drcPlot: 'dummy5', AC50: 'n.d.', hill: null, source: 'target1_validation'},\n      {ID: 'DB01240', drcPlot: 'dummy6', AC50: null, hill: null, source: 'target1_validation'}\n    ];\n  }\n\n  getRecords(q) {\n    return Promise.resolve({ records: this.fittingStub(q) });\n  }\n\n  getRecordsByCompound(compound) {\n    const rcds = this.fittingStub({qcsRefId: 'QCS-YYYY', layerIndex: 1})\n      .filter(e => e.ID === compound);\n    return Promise.resolve({ records: rcds });\n  }\n\n  qcsInfoStub(ids) {\n    if (!Array.isArray(ids)) throw `${ids} is not a string`;\n    const layers = [\n      {layerIndex: 0, name: 'Activity%'},\n      {layerIndex: 1, name: 'Background%'},\n      {layerIndex: 2, name: 'Correction'}\n    ];\n    return [\n      {qcsRefId: 'QCS-XXX0', name: 'hoge', layers: layers},\n      {qcsRefId: 'QCS-XXX1', name: 'fuga', layers: layers},\n      {qcsRefId: 'QCS-XXX2', name: 'piyo', layers: layers}\n    ];\n  }\n\n  getQcsInfo(qcsRefIds) {\n    return Promise.resolve(this.qcsInfoStub(qcsRefIds));\n  }\n}\n\n\nexport class ScreenerRawValueStub extends ScreenerRawValue {\n  constructor() {\n    super();\n    this.resourceFile = 'screener_rawvalue_stub.yaml';\n  }\n\n  rawValueStub(q) {\n    if (typeof q.qcsRefId !== 'string') throw `${q.qcsRefId} is not a string`;\n    if (typeof q.layerIndex !== 'number') throw `${q.layerIndex} is not a number`;\n    return [\n        {ID: 'DB00189', rawValue: 12.7, source: 'target1_screen'},\n        {ID: 'DB00193', rawValue: 43.6, source: 'target1_screen'},\n        {ID: 'DB00203', rawValue: 102.6, source: 'target1_screen'},\n        {ID: 'DB00865', rawValue: -0.6, source: 'target1_screen'},\n        {ID: 'DB01143', rawValue: 50, source: 'target1_screen'},\n        {ID: 'DB01240', rawValue: null, source: 'target1_screen'}\n    ];\n  }\n\n  getRecords(q) {\n    return Promise.resolve({ records: this.rawValueStub(q) });\n  }\n\n  getRecordsByCompound(compound) {\n    const rcds = this.rawValueStub({qcsRefId: 'QCS-XXXX', layerIndex: 1})\n      .filter(e => e.ID === compound);\n    return Promise.resolve({ records: rcds });\n  }\n}\n"],"names":["getGlobalConfig","key","globalConfig","getResources","domains","store","then","rsrcs","filter","e","includes","domain","getCurrentTable","q","hasOwnProperty","getItemById","id","Promise","resolve","updateTableAttribute","tblID","value","updateItem","item","initialize","navigator","debug","serviceWorker","register","registration","console","info","scope","catch","err","serverTmpl","localServer","templates","res","setGlobalConfig","serverConfig","status","rsrcFetched","fetcherInstances","map","api","extendAsync","indexed","i","idx","setResources","all","numericAsc","a","b","fa","parseFloat","fb","isNaN","String","localeCompare","textAsc","updateTableRecords","selection","rcds","keyFunc","header","select","selectAll","data","rowSelection","exit","remove","rowEntered","enter","append","d","merge","classed","html","undefined","valueType","digit","fmt","formatNum","actionTable","tbl","records","forEach","rcd","action","app","def","fetchable","name","d3","call","cmp","createTable","on","this","attr","text","deleteTable","render","renderTableStatus","tbls","columns","responseDate","length","renderGraphStatus","grfs","grf","nodeTableId","edges","renderServerStatus","calc","_index","server","Object","entries","push","getTablesByFormat","abortRequestable","conclike","col","dataSourceId","resource","column","capitalize","join","schema","items","resources","idb","version","stores","getAppSetting","where","equals","first","putAppSetting","k","v","put","orderBy","toArray","putResources","bulkPut","getAllItems","reverse","getItemsByFormat","format","sortBy","tableId","callback","modify","deleteItem","delete","putItem","Dexie","Fetcher","[object Object]","baseURL","available","url","formData","options","reject","xhr","XMLHttpRequest","open","method","responseType","withCredentials","onload","response","send","Date","toString","cols","lastUpdated","now","LocalServerActivity","super","entities","query","FormData","set","JSON","stringify","fetch","body","credentials","Map","Array","isArray","request","json","rsrc","dataColumn","visible","entity","queries","serializedRequest","compound","targets","values","operator","getRecords","ids","mapping","row","ID","blob","LocalServerChemical","hiddenColumns","prototype","apply","extraColumns","ScreenerFitting","resourceFile","enabled","qcsRefId","layerIndex","queryString","compounds","c","compoundId","drcPlot","fitting","AC50","linearAC50","hill","Math","round","hillCoefficient","qcsRefIds","requestRecords","refid_layer","split","parseInt","plotId","min","max","qcSessions","ScreenerRawValue","pred","plates","plt","wells","compoundIds","rawValue","rawValues","extend","ScreenerFittingStub","source","fittingStub","layers","qcsInfoStub","ScreenerRawValueStub","rawValueStub","onLine","urlQuery","window","location","search","substring","API","chemical","activity","screenerrawvalue","screenerfitting","screenerrawvaluestub","screenerfittingstub","localChemInstance","get","getFetcher","from","dataFetcherInstances","dataFetcherDomains","getResourceColumns","tags","getDataSourceColumns","find","getAllTables","getTable","getCurrentRecords","setColumnsToShow","updates","visibles","sort","sorts","digits","joinColumn","concat","unique","insertTable","updateTable","update","recordCount","searchDoneCount","execTime","progress","assign","reset","loader","document","protocol","type","conv","scientific","si","rounded","Number","partialMatch","target","toUpperCase","indexOf","numericDesc","textDesc","selectOptions","checkboxList","entered","updated","size","appendTableRows","newRcds","addSort","style","isAsc","isNum","formatNumbers","each","colIdx","tasks","command"],"mappings":"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"}