{"version":3,"file":"control.js","sources":["../src/helper/definition.js","../src/store/StoreConnection.js","../src/Loader.js","../src/helper/formatValue.js","../src/component/Component.js","../src/control.js","../src/store/IDBStore.js","../src/fetcher/Fetcher.js","../src/fetcher/LocalServer.js","../src/fetcher/Screener.js","../src/fetcher/ScreenerTestStub.js"],"sourcesContent":["\nexport function fetchable(tbl) {\n  return ['In progress', 'Queued', 'Aborting'].includes(tbl.status);\n}\n\n\nexport function abortRequestable(tbl) {\n  return ['In progress', 'Queued'].includes(tbl.status);\n}\n\n\nexport function conclike(col) {\n  return col.hasOwnProperty('valueType')\n    && ['AC50', 'IC50', 'ED50'].includes(col.valueType);\n}\n\n\nexport function dataSourceId(domain, resource, column) {\n  return [domain, resource, column]\n    .map(e => e.capitalize())\n    .join('');  // DomainResourceColumn\n}\n","\nimport {dataSourceId} from '../helper/definition.js';\nimport {default as store} from './IDBStore.js';\nimport {LocalServerActivity, LocalServerChemical} from '../fetcher/LocalServer.js';\nimport {ScreenerFitting, ScreenerRawValue} from '../fetcher/Screener.js';\nimport {ScreenerFittingStub, ScreenerRawValueStub} from '../fetcher/ScreenerTestStub.js';\n\n\n// Global config\n\nconst globalConfig = {\n  \"onLine\": true,\n  \"server\": {},\n  \"templates\": {},\n  \"urlQuery\": {}\n};\n\nwindow.location.search.substring(1).split(\"&\")\n  .map(e => e.split('=')).forEach(e => {\n    globalConfig.urlQuery[e[0]] = e[1];\n  });\n\n\nexport function getGlobalConfig(key) {\n  return globalConfig[key];\n}\n\n\nexport function setGlobalConfig(key, value) {\n  globalConfig[key] = value;\n}\n\n\n// API instances\n\nconst API = new Map(Object.entries({\n  chemical: new LocalServerChemical(),\n  activity: new LocalServerActivity(),\n  screenerrawvalue: new ScreenerRawValue(),\n  screenerfitting: new ScreenerFitting(),\n  screenerrawvaluestub: new ScreenerRawValueStub(),\n  screenerfittingstub: new ScreenerFittingStub()\n}));\n\n\nexport function localChemInstance() {\n  return API.get('chemical');\n}\n\n\nexport function getFetcher(domain) {\n  return API.get(domain);\n}\n\n\nexport function fetcherInstances() {\n  return Array.from(API.values());\n}\n\n\nexport function dataFetcherInstances() {\n  const res = [];\n  API.forEach((v, k) => {\n    if (k !== 'chemical') res.push(v);\n  });\n  return res;\n}\n\n\nexport function dataFetcherDomains() {\n  const res = [];\n  API.forEach((v, k) => {\n    if (k !== 'chemical') res.push(k);\n  });\n  return res;\n}\n\n\n// API data resource on local IndexedDB\n\nexport function getResources(domains) {\n  return store.getResources().then(rsrcs => {\n    return rsrcs.filter(e => domains.includes(e.domain));\n  });\n}\n\n\nexport function setResources(rsrcs) {\n  return store.putResources(rsrcs);\n}\n\n\nexport function getResourceColumns(domains) {\n  return getResources(domains).then(rsrcs => {\n    return rsrcs.map(rsrc => {\n      return rsrc.columns.map(col => {\n        col.domain = rsrc.domain;\n        col.key = dataSourceId(rsrc.domain, rsrc.id, col.key);\n        col.entity = rsrc.entity;\n        if (!col.hasOwnProperty('tags')) col.tags = rsrc.tags;\n        return col;\n      });\n    }).extend();\n  });\n}\n\n\nexport function getDataSourceColumns(domain, ids) {\n  return store.getResources([domain]).then(rsrcs => {\n    return ids.map(d => rsrcs.find(e => e.id === d).columns)\n      .extend();\n  });\n}\n\n\n// Datatable on local IndexedDB\n\nexport function getAllTables() {\n  return store.getAllItems();\n}\n\n\nexport function getTablesByFormat(format) {\n  return store.getItemsByFormat(format);\n}\n\n\nexport function getTable(tableId) {\n  return store.getItemById(tableId);\n}\n\n\nexport function getRecords(tableId) {\n  return store.getItemById(tableId)\n    .then(tbl => tbl.records);\n}\n\n\nexport function getCurrentTable() {\n  const q = getGlobalConfig('urlQuery');\n  if (!q.hasOwnProperty('id')) return Promise.resolve();\n  return store.getItemById(q.id);\n}\n\n\nexport function getCurrentRecords() {\n  return getCurrentTable().then(tbl => tbl.records);\n}\n\n\nexport function setColumnsToShow(updates) {\n  return store.updateItem(getGlobalConfig('urlQuery').id, item => {\n    item.columns.forEach((col, i) => {\n      col.visible = updates.visibles.includes(col.key);\n      col.sort = updates.sorts[i];\n      col.digit = updates.digits[i];\n    });\n  });\n}\n\n\nexport function joinColumn(mapping, tableId=globalConfig.urlQuery.id) {\n  const cols = mapping.hasOwnProperty('column') ? mapping.column : mapping.columns;\n  return store.updateItem(tableId, item => {\n    item.records\n      .filter(rcd => mapping.mapping.hasOwnProperty(rcd[mapping.key]))\n      .forEach(rcd => {\n        if (mapping.hasOwnProperty('column')) {\n          rcd[mapping.column.key] = mapping.mapping[rcd[mapping.key]];\n        } else {\n          mapping.columns.forEach((col, i) => {\n            rcd[col.key] = mapping.mapping[rcd[mapping.key]][i];\n          });\n        }\n      });\n    item.columns = item.columns.concat(cols).unique('key');\n    item.lastUpdated = mapping.lastUpdated;\n  });\n}\n\n\nexport function updateTableAttribute(tblID, key, value) {\n  return store.updateItem(tblID, item => {\n    item[key] = value;\n  });\n}\n\n\nexport function insertTable(data) {\n  return store.putItem(data);\n}\n\n\nexport function updateTable(data) {\n  if (data === undefined) return Promise.resolve();  // No update\n  if (data.status === 'Failure') {  // No data found on server\n    return updateTableAttribute(data.id, 'status', 'Failure');\n  }\n  // update\n  return store.updateItem(data.id, item => {\n    const update = {\n      responseDate: data.responseDate,\n      records: data.records,\n      columns: data.columns,\n      recordCount: data.recordCount,\n      searchDoneCount: data.searchDoneCount,\n      execTime: data.execTime,\n      progress: data.progress,\n      status: data.status,\n    };\n    if (data.hasOwnProperty('lastUpdated')) {\n      update.lastUpdated = data.lastUpdated;\n    }\n    Object.assign(item, update);\n  });\n}\n\n\nexport function deleteTable(id) {\n  return store.deleteItem(id);\n}\n\n\nexport function reset() {\n  return store.reset();\n}\n","\nimport {\n  setGlobalConfig, localChemInstance, fetcherInstances, setResources\n} from './store/StoreConnection.js';\n\nconst localServer = localChemInstance();\n\n\nfunction initialize() {\n  if ('serviceWorker' in navigator && !debug) {\n    navigator.serviceWorker\n      .register('sw.js')\n      .then(registration => {\n        console.info(\n          'ServiceWorker registration successful with scope: ',\n          registration.scope\n        );\n      }).catch(err => {\n        console.info('ServiceWorker registration failed: ', err);\n      });\n  } else if (debug) {\n    console.info('Off-line mode is disabled for debugging');\n  } else {\n    console.info('Off-line mode is not supported');\n  }\n  const serverTmpl = localServer.templates().then(res => {\n    setGlobalConfig('templates', res.templates);\n  });\n  const serverConfig = localServer.status().then(res => {\n    setGlobalConfig('server', res);\n  });\n  // TODO: skip loader if there is already resources in the store\n  // 1. collate resource version\n  // 2. if no local resource or server resource is newer, fetch\n  const rsrcFetched = fetcherInstances()\n    .map(api => api.getResources())\n    .extendAsync().then(res => {\n      const indexed = res.map((e, i) => {\n        e.idx = i;\n        return e;\n      });\n      return setResources(indexed);\n    });\n  return Promise.all([serverTmpl, serverConfig, rsrcFetched]);\n}\n\n\nexport function loader() {\n  if (document.location.protocol === \"file:\") {\n    console.info('Off-line mode (local file)');\n    setGlobalConfig('onLine', false);\n    return Promise.resolve();\n  }\n  if ('onLine' in navigator) {\n    if (!navigator.onLine) {\n      console.info('Off-line mode (no internet connection)');\n      setGlobalConfig('onLine', false);\n      return Promise.resolve();\n    }\n  }\n  return fetch(`${localServer.baseURL}favicon.ico`)\n    .then(() => {\n      // HTTP 404\n      setGlobalConfig('onLine', true);\n      return initialize();\n    }).catch(() => {\n      console.info('Off-line mode (server not responding)');\n      setGlobalConfig('onLine', false);\n      return Promise.resolve();\n    });\n}\n","\nimport d3 from 'd3';\n\n\n/**\n * Format number\n * @param {object} value - value\n * @param {string} type - si | scientific | rounded | raw\n */\nexport function formatNum(value, type) {\n  const conv = {\n    scientific: \".3e\",\n    si: \".3s\",\n    rounded: \".3r\"\n  };\n  if (type === 'raw') return value;\n  if (value === undefined || value === null || Number.isNaN(value)) return '';\n  return value == parseFloat(value) ? d3.format(conv[type])(value) : value;\n}\n\nexport function partialMatch(query, target) {\n  if (target === undefined || target === null || target === '') return false;\n  return target.toString().toUpperCase()\n    .indexOf(query.toString().toUpperCase()) !== -1;\n}\n\nexport function numericAsc(a, b) {\n  const fa = parseFloat(a);\n  const fb = parseFloat(b);\n  if (isNaN(fa) || isNaN(fb)) {\n    return String(b).localeCompare(String(a));\n  }\n  return fb - fa;\n}\n\n\nexport function numericDesc(a, b) {\n  return numericAsc(b, a);\n}\n\n\nexport function textAsc(a, b) {\n  return String(b).localeCompare(String(a));\n}\n\n\nexport function textDesc(a, b) {\n  return textAsc(b, a);\n}\n","\nimport d3 from 'd3';\nimport {\n  formatNum, numericAsc, textAsc, numericDesc, textDesc\n} from '../helper/formatValue.js';\n\n\nexport function selectOptions(selection, data, key, text) {\n  const options = selection.selectAll('option')\n    .data(data, key);\n  options.exit().remove();\n  options.enter().append('option')\n    .merge(options)\n      .attr('value', key)\n      .text(text);\n}\n\n\nexport function checkboxList(selection, data, name, key, text) {\n  const items = selection.selectAll('li').data(data, key);\n  items.exit().remove();\n  const entered = items.enter().append('li')\n    .attr('class', 'form-check')\n    .append('label');\n  entered.append('input');\n  entered.append('span');\n  const updated = entered.merge(items.select('label'))\n    .attr('class', 'form-check-label');\n  updated.select('input')\n    .attr('type', 'checkbox')\n    .attr('class', 'form-check-input')\n    .attr('name', name)\n    .attr('value', key);\n  updated.select('span')\n    .text(text);\n}\n\n\nexport function createTable(selection, tbl) {\n  // Header\n  if (!selection.select('thead').size()) {\n    selection.append('thead').append('tr');\n  }\n  // Records\n  if (!selection.select('tbody').size()) {\n    selection.append('tbody');\n  }\n  const cols = tbl.columns\n    .filter(e => !e.hasOwnProperty('visible') || e.visible !== false\n  );\n  const header = selection.select('thead tr').selectAll('th')\n    .data(cols, d => d.key);\n  header.exit().remove();\n  header.enter().append('th')\n    .merge(header)\n      .text(d => d.hasOwnProperty('name') ? d.name : d.key);\n}\n\n\nexport function updateTableRecords(selection, rcds, keyFunc) {\n  const header = selection.select('thead tr').selectAll('th')\n    .data();\n  const rowSelection = selection.select('tbody').selectAll('tr')\n    .data(rcds, keyFunc);\n  rowSelection.exit().remove();\n  const rowEntered = rowSelection.enter().append('tr');\n  rowEntered.selectAll('td')\n    .data(d => header.map(e => d[e.key]))\n    .enter().append('td');\n  rowEntered.merge(rowSelection)\n    .selectAll('td')\n    .classed('align-middle', true)\n    .html((d, i) => {\n      if (d === undefined) return '';\n      if (header[i].valueType === 'plot') return '[plot]';\n      if (header[i].valueType === 'image') return '[image]';\n      if (header[i].hasOwnProperty('digit') && header[i].digit !== 'raw') {\n        return formatNum(d, header[i].digit);\n      }\n      return d;\n    });\n}\n\n\nexport function appendTableRows(selection, rcds, keyFunc) {\n  const newRcds = selection.select('tbody').selectAll('tr').data();\n  Array.prototype.push.apply(newRcds, rcds);\n  updateTableRecords(selection, newRcds, keyFunc);\n}\n\n\nexport function addSort(selection) {\n  selection.select('thead tr').selectAll('th')\n    .filter(d => d.sort !== 'none')\n    .append('span').append('a')\n      .attr('id', d => `sort-${d.key}`)\n      .text('^v')\n      .style('display', 'inline-block')\n      .style('width', '30px')\n      .style('text-align', 'center')\n    .on('click', d => {\n      const isAsc = d3.select(`#sort-${d.key}`).text() === 'v';\n      const isNum = !d.hasOwnProperty('sort') || d.sort === 'numeric';\n      const cmp = isAsc\n        ? (isNum ? numericAsc : textAsc)\n        : (isNum ? numericDesc : textDesc);\n      selection.select('tbody').selectAll('tr')\n        .sort((a, b) => cmp(a[d.key], b[d.key]));\n      d3.select(`#sort-${d.key}`)\n        .text(isAsc ? '^' : 'v');\n    });\n}\n\n\nexport function formatNumbers(selection) {\n  // DEPRECATED: no longer used\n  selection.select('thead tr').selectAll('th')\n    .each((col, colIdx) => {\n      if (!col.hasOwnProperty('digit') || col.digit === 'raw') return;\n      selection.select('tbody').selectAll('tr')\n        .selectAll('td')\n          .filter((d, i) => i === colIdx)\n          .text(d => formatNum(d, col.digit));\n    });\n}\n","\nimport d3 from 'd3';\nimport {fetchable} from './helper/definition.js';\nimport {loader} from './Loader.js';\nimport {createTable, updateTableRecords} from './component/Component.js';\nimport {\n  getGlobalConfig, deleteTable, localChemInstance, getTablesByFormat,\n  getAllTables, updateTable, reset\n} from './store/StoreConnection.js';\nconst localServer = localChemInstance();\n\n\nfunction actionTable(selection, tbl) {\n  tbl.records.forEach(rcd => {\n    rcd.action = `<a role=\"button\" class=\"btn btn-secondary btn-sm\" href=\"${tbl.app}?id=${rcd.id}\" target=\"_blank\">Open</a>`;\n    if (fetchable(tbl)) {\n      rcd.action += `<button type=\"button\" class=\"btn btn-warning btn-sm\" disabled>Running</button>`;\n    } else {\n      rcd.action += `<button type=\"button\" class=\"btn btn-warning btn-sm delete-item\" data-toggle=\"modal\" data-target=\"#confirm-dialog\" data-tblid=\"${rcd.id}\" data-tblname=\"${rcd.name}\">Delete</button>`;\n    }\n  });\n  d3.select(selection).call(createTable, tbl)\n    .call(updateTableRecords, tbl.records, d => d.id);\n  d3.selectAll('tr button.delete-item')\n    .on('click', function() {\n      const id = d3.select(this).attr('data-tblid');\n      const name = d3.select(this).attr('data-tblname');\n      d3.select('#confirm-message')\n        .text(`Are you sure you want to delete ${name} ?`);\n      d3.select('#confirm-submit')\n        .on('click', () => deleteTable(id).then(render));\n    });\n}\n\n\nfunction renderTableStatus(tbls) {\n  const data = {\n    app: 'datatable.html',\n    columns: [\n      {key: 'name'},\n      {key: 'responseDate'},\n      {key: 'status'},\n      {key: 'records'},\n      {key: 'action'}\n    ]};\n  data.records = tbls.map(tbl => {\n    if (!tbl.hasOwnProperty('status')) tbl.status = 'Completed';\n    return {\n      \"id\": tbl.id,\n      \"name\": tbl.name,\n      \"responseDate\": tbl.responseDate,\n      \"status\": tbl.status,\n      \"records\": tbl.records.length,\n    };\n  });\n  actionTable('#local-tables', data);\n}\n\n\nfunction renderGraphStatus(grfs) {\n  const data = {\n    app: 'graph.html',\n    columns: [\n      {key: 'name'},\n      {key: 'responseDate'},\n      {key: 'nodeTableId'},\n      {key: 'status'},\n      {key: 'edges'},\n      {key: 'action'}\n    ]};\n  data.records = grfs.map(grf => {\n    if (!grf.hasOwnProperty('status')) grf.status = 'Completed';\n    return {\n      \"id\": grf.id,\n      \"name\": grf.name,\n      \"responseDate\": grf.responseDate,\n      \"nodeTableId\": grf.nodeTableId,\n      \"status\": grf.status,\n      \"edges\": grf.records.length,\n    };\n  });\n  actionTable('#local-graphs', data);\n}\n\n\nfunction renderServerStatus(data) {\n  d3.select('#server-calc').call(createTable, data.calc)\n    .call(updateTableRecords, data.calc.records, d => d._index);\n  const server = {\n    columns: [{key: 'key'}, {key: 'value'}],\n    records: []\n  };\n  Object.entries(data).filter(e => e[0] !== 'calc')\n    .forEach(e => server.records.push({key: e[0], value: e[1]}));\n  d3.select('#server-status').call(createTable, server)\n    .call(updateTableRecords, server.records, d => d._index);\n}\n\n\nfunction render() {\n  if (getGlobalConfig('onLine')) {\n    renderServerStatus(getGlobalConfig('server'));\n  }\n  return Promise.all([\n    getTablesByFormat('datatable').then(renderTableStatus),\n    getTablesByFormat('connection').then(renderGraphStatus)\n  ]);\n}\n\n\nd3.select('#refresh-all')\n  .on('click', () => {\n    return getAllTables().then(tbls => {\n      const tasks = tbls.map(tbl => {\n        if (!fetchable(tbl)) return Promise.resolve();\n        const query = {id: tbl.id, command: 'fetch'};\n        return localServer.getRecords(query).then(updateTable);\n      });\n      return Promise.all(tasks);\n    }).then(render);\n  });\n\n\nd3.select('#reset-local')\n  .on('click', () => {\n    d3.select('#confirm-message')\n      .text('Are you sure you want to delete all local tables and reset the datastore ?');\n    d3.select('#confirm-submit')\n      .on('click', () => reset().then(render));\n  });\n\n\n\nfunction run() {\n  return loader().then(render);\n}\nrun();\n","\nimport Dexie from 'Dexie';\n\n// TODO: can indexed records improve query performance ?\n// TODO: remove app table. no longer used\n\nconst schema = {\n  app: 'key',\n  items: 'id, format, responseDate',\n  resources: 'idx, id'\n};\n\nlet idb = new Dexie('Store');\nidb.version(1).stores(schema);\n\n\nfunction getAppSetting(key) {\n  return idb.app.where('key').equals(key).first()\n    .then(res => {\n      if (res === undefined) return undefined;\n      return res.value;\n    });\n}\n\n\nfunction putAppSetting(k, v) {  // returns id in success\n  return idb.app.put({ key: k, value: v });\n}\n\n\nfunction getResources() {\n  return idb.resources.orderBy('idx')\n    .toArray();\n}\n\n\nfunction putResources(data) { // returns last id in success\n  return idb.resources.bulkPut(data);\n}\n\n\nfunction getAllItems() {\n  return idb.items.orderBy('responseDate').reverse()\n    .toArray();\n}\n\n\nfunction getItemsByFormat(format) {\n  return idb.items.where('format').equals(format).reverse()\n    .sortBy('responseDate');\n}\n\n\nfunction getItemById(tableId) {\n  return idb.items.where('id').equals(tableId).first();\n}\n\n\nfunction updateItem(tableId, callback) {  // returns num of updated items\n  return idb.items.where('id').equals(tableId).modify(callback);\n}\n\n\nfunction deleteItem(tableId) { // returns num of deleted items\n  return idb.items.where('id').equals(tableId).delete();\n}\n\n\nfunction putItem(data) { // returns id in success\n  return idb.items.put(data);\n}\n\n\nfunction reset() {\n  // Try this before tackling with local db troubles\n  return idb.delete().then(() => {\n    idb = new Dexie('Store');\n    idb.version(1).stores(schema);\n  });\n}\n\nexport default {\n  getAppSetting, putAppSetting, getResources, putResources,\n  getAllItems, getItemsByFormat, getItemById,\n  updateItem, deleteItem, putItem, reset\n};\n","\nexport default class Fetcher {\n  constructor() {\n    this.baseURL = \"\";\n    this.available = false;\n  }\n\n  xhrRequest(url, formData=null, options={}) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('method' in options ? options.method : 'POST', url);\n      xhr.responseType = 'responseType' in options ? options.responseType : 'json';\n      xhr.withCredentials = 'withCredentials' in options ? options.withCredentials : false;\n      xhr.onload = () => {\n        if (xhr.status !== 200) {\n          reject(xhr);\n        } else {\n          resolve(xhr.response);\n        }\n      };\n      xhr.send(formData);\n    });\n  }\n\n  now() {\n    const now = new Date();\n    return now.toString();\n  }\n\n  getResources() {\n    // required\n  }\n\n  formatResult(cols, data) {\n    // to be called by store.updateTable\n    // required for chemical domain\n    data.lastUpdated = this.now();\n    return data;\n  }\n\n  getRecords() {\n    // required\n  }\n\n  getRecordsByCompound() {\n    // required for activity domain\n  }\n\n  getMapping() {\n    // required for activity domain\n  }\n\n  getGraphEdges() {\n\n  }\n}\n","\nimport {default as Fetcher} from './Fetcher.js';\n\n\nexport class LocalServerActivity extends Fetcher {\n  constructor() {\n    super();\n    this.baseURL = './';\n    this.domain = 'activity';\n    this.entities = [];\n  }\n\n  serializedRequest(url, query={}) {\n    const formData = new FormData();\n    formData.set('query', JSON.stringify(query));\n    return fetch(`${this.baseURL}${url}`,\n      {method: 'post', body: formData, credentials: 'include'});\n  }\n\n  request(url, query={}) {\n    const formData = new FormData();\n    const qmap = new Map(Object.entries(query));\n    qmap.forEach((v, k) => {\n      if (Array.isArray(v)) {\n        v.forEach(e => formData.append(k, e));\n      } else {\n        formData.set(k, v);\n      }\n    });\n    return fetch(`${this.baseURL}${url}`,\n      {method: 'post', body: formData, credentials: 'include'});\n  }\n\n  getResources() {\n    return this.request('schema', {domain: this.domain})\n      .then(res => res.json())\n      .then(json => {\n        json.resources.forEach(rsrc => {\n          rsrc.domain = this.domain;\n          rsrc.columns.forEach(col =>{\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            if (!col.hasOwnProperty('method')) col.method = 'sql';\n            col.visible = true;\n          });\n          this.entities.push(rsrc.entity);\n        });\n        this.available = true;\n        return json.resources;\n      });\n  }\n\n  getRecords(queries) {\n    return this.serializedRequest('sql', queries)\n      .then(res => res.json())\n      .then(json => {\n        json.domain = this.domain;\n        return json;\n      });\n  }\n\n  getRecordsByCompound(compound) {\n    // TODO: this.entities\n    const query = {\n      method: 'sql',\n      targets: this.entities,\n      key: 'ID',\n      values: [compound],\n      operator: 'eq'\n    };\n    return this.getRecords(query);\n  }\n\n  getMapping(ids, column) {\n    const query = {\n      method: 'sql',\n      targets: [column.entity],\n      key: 'ID',\n      values: ids,\n      operator: 'fm'\n    };\n    return this.serializedRequest('sql', query)\n      .then(res => res.json())\n      .then(json => {\n        const mapping = {};\n        json.records.filter(row => row.hasOwnProperty(column.dataColumn))\n          .forEach(row => { mapping[row.ID] = row[column.dataColumn]; });\n        return {\n          key: query.key,\n          column: column,\n          mapping: mapping,\n          lastUpdated: this.now(),\n        };\n      });\n  }\n\n  status() {\n    return this.request('server').then(res => res.json());\n  }\n\n  templates() {\n    return this.request('templates').then(res => res.json());\n  }\n\n  strprev(query) {\n    return this.serializedRequest('strprev', query).then(res => res.text());\n  }\n\n  exportExcel(query) {\n    return this.request('xlsx', query).then(res => res.blob());\n  }\n\n  exportSDFile(query) {\n    return this.request('exportsdf', query).then(res => res.text());\n  }\n\n  reportPreview(query) {\n    return this.request('reportprev', query).then(res => res.json());\n  }\n\n  report(query) {\n    return this.request('report', query).then(res => res.blob());\n  }\n}\n\n\nexport class LocalServerChemical extends LocalServerActivity {\n  constructor() {\n    super();\n    this.domain = 'chemical';\n    this.hiddenColumns = [\"_mw\", \"_mw_wo_sw\", \"_formula\", \"_logp\", \"_nonH\"];\n  }\n\n  formatResult(cols, data) {\n    if (cols.length === 0) {  // sdf\n      data.columns.forEach(col => {\n        col.visible = this.hiddenColumns.includes(col.key) ? false : true;\n      });\n      return data;\n    }\n    Array.prototype.push.apply(data.columns, cols);\n    if (data.hasOwnProperty('extraColumns')) {\n      Array.prototype.push.apply(data.columns, data.extraColumns);\n      delete data.extraColumns;\n    }\n    data.columns.forEach(col => {\n      if (!col.hasOwnProperty('name')) col.name = col.key;\n      if (col.key === data.query.key) {\n        col.visible = true;  // Search key\n      } else {\n        col.visible = this.hiddenColumns.includes(col.key) ? false : true;\n      }\n    });\n    data.lastUpdated = this.now();\n    return data;\n  }\n\n  getResources() {\n    return this.request('schema', {domain: this.domain})\n      .then(res => res.json())\n      .then(json => {\n        json.resources.forEach(rsrc => {\n          rsrc.domain = this.domain;\n          rsrc.columns.forEach(col =>{\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            if (!col.hasOwnProperty('method')) col.method = 'chemsql';\n            col.visible = true;\n          });\n        });\n        this.available = true;\n        return json.resources;\n      });\n  }\n\n  getRecords(query) {\n    let url;\n    if (query.hasOwnProperty('command')) {\n      url = 'rows';\n    } else if (query.hasOwnProperty('nodeTableId')) {\n      url = 'graph';\n    } else if (['chemsql', 'sql'].includes(query.method)) {\n      url = 'sql';\n    } else {\n      url = 'compute';\n    }\n    return this.serializedRequest(url, query)\n      .then(res => res.json())\n      .then(json => {\n        json.domain = this.domain;\n        return json;\n      });\n  }\n\n  importSDF(query) {\n    return this.request('sdf', query)\n    .then(res => res.json())\n    .then(json => {\n      json.domain = this.domain;\n      json.columns.forEach(col =>{\n        col.visible = this.hiddenColumns.includes(col.key) ? false : true;\n      });\n      const now = new Date();\n      json.lastUpdated = now.toString();\n      return json;\n    });\n  }\n}\n","\nimport {default as Fetcher} from './Fetcher.js';\n\n\nexport class ScreenerFitting extends Fetcher {\n  constructor() {\n    super();\n    this.resourceFile = 'screener_fitting.yaml';\n    this.domain = null;\n    this.baseURL = null;\n  }\n\n  getResources() {\n    const formData = new FormData();\n    formData.set('filename', this.resourceFile);\n    return fetch('source', {method: 'post', body: formData, credentials: 'include'})\n      .then(res => res.json())\n      .then(json => {\n        if (json.hasOwnProperty('enabled') && json.enabled === false) return;\n        this.available = true;\n        this.domain = json.domain;\n        this.baseURL = json.url;\n        return json.resources.map(rsrc => {\n          rsrc.domain = json.domain;\n          rsrc.entity = `${rsrc.qcsRefId}:${rsrc.layerIndex}`;\n          delete rsrc.qcsRefId;\n          delete rsrc.layerIndex;\n          rsrc.columns.forEach(col => {\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            col.visible = true;\n          });\n          return rsrc;\n        });\n    });\n  }\n\n  request(queryString) {\n    return fetch(`${this.baseURL}${queryString}`, {\n      method: 'GET',\n      credentials : 'include'\n    }).then(res => res.json());\n  }\n\n  requestRecords(queryString) {\n    return this.request(queryString)\n      .then(json => {\n        const rcds = json.compounds.map(c => {\n          return {\n            ID: c.compoundId,\n            qcsRefId: c.qcsRefId,\n            layerIndex: c.layerIndex,\n            drcPlot: c.fitting.drcPlot,\n            AC50: c.fitting.linearAC50,\n            hill: Math.round(c.fitting.hillCoefficient * 100) / 100\n          };\n        });\n        return { records: rcds };\n      });\n  }\n\n  getRecords(q) {\n    const joinedIds = q.qcsRefIds.join('%2C');\n    const queryString = `/compounds?qcsRefIds=${joinedIds}\\\n&layerIndices=${q.layerIndex - 1}\\\n&fields=compoundId%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n    return this.requestRecords(queryString);\n  }\n\n  getRecordsByCompound(compound) {\n    const queryString = `/compounds?q=compoundId%3A${compound}\\\n&fields=compoundId%2CqcsRefId%2ClayerIndex\\\n%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n    return this.requestRecords(queryString);\n  }\n\n  getMapping(ids, column) {\n    const refid_layer = column.entity.split(':');\n    const query = {\n      qcsRefId: refid_layer[0],\n      layerIndex: parseInt(refid_layer[1])\n    };\n    return this.getRecords(query).then(res => {\n      const mapping = {};\n      res.records.filter(row => ids.includes(row.ID))\n        .forEach(row => { mapping[row.ID] = row[column.dataColumn]; });\n      return {\n        key: 'ID',\n        column: column,\n        mapping: mapping,\n        lastUpdated: this.now()\n      };\n    });\n  }\n\n  getDrcPlot(compoundId, plotId, min = -20, max = 120) {\n    // compoundResult.fitting.drcPlot -> drcPlots/idstring\n    // returns image/png\n    const queryString = `/${plotId}?width=180&height=180&title=compoundId\\\n&activityRangeMin=${min}&activityRangeMax=${max}`;\n    return this.request(queryString);\n  }\n\n  getQcsInfo(qcsRefIds) {\n    const ids = qcsRefIds.map(e => `qcsRefId:${e}`).join(' OR ');\n    const queryString = `/qcSessions?q=${ids}`;\n    return this.request(queryString).then(res => res.qcSessions);\n  }\n}\n\n\nexport class ScreenerRawValue extends ScreenerFitting{\n  constructor() {\n    super();\n    this.resourceFile = 'screener_rawvalue.yaml';\n  }\n\n  getResources() {\n    const formData = new FormData();\n    formData.set('filename', this.resourceFile);\n    return fetch('source', {method: 'post', body: formData, credentials: 'include'})\n      .then(res => res.json())\n      .then(json => {\n        if (json.hasOwnProperty('enabled') && json.enabled === false) return;\n        this.available = true;\n        this.domain = json.domain;\n        this.baseURL = json.url;\n        return json.resources.map(rsrc => {\n          rsrc.domain = json.domain;\n          rsrc.entity = `${rsrc.qcsRefId}:${rsrc.layerIndex}`;\n          delete rsrc.qcsRefId;\n          delete rsrc.layerIndex;\n          rsrc.columns.forEach(col => {\n            col.key = 'rawValue';\n            if (!col.hasOwnProperty('name')) col.name = col.key;\n            if (!col.hasOwnProperty('dataColumn')) col.dataColumn = col.key;\n            col.visible = true;\n          });\n          return rsrc;\n        });\n      });\n  }\n\n  requestRecords(queryString, pred) {\n    return this.request(queryString).then(res => {\n      const rcds = res.plates.filter(plt => plt.wells.hasOwnProperty('compoundIds'))\n        .map(plt => {\n          return plt.wells.compoundIds.map((c, i) => {\n            return {\n              ID: c,\n              qcsRefId: plt.qcsRefId,\n              layerIndex: plt.layerIndex,\n              rawValue: plt.wells.rawValues[i]\n            };\n          }).filter(pred);\n        }).extend();\n      return { records: rcds };\n    });\n  }\n\n  getRecords(q) {\n    const joinedIds = q.qcsRefIds.join('%2C');\n    const queryString = `/plates?qcsRefIds=${joinedIds}\\\n&layerIndices=${q.layerIndex - 1}\\\n&limit=200\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n    return this.requestRecords(queryString, e => e.ID !== null);\n  }\n\n  getRecordsByCompound(compound) {\n    const queryString = `/plates?q=wells.compoundIds%3A${compound}\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n    return this.requestRecords(queryString, e => e.ID === compound);\n  }\n}\n\n\n/*\nfunction request(query) {\n  return store.getDBResources('activity')\n    .then(rsrc => {\n      const url = `${rsrc.find(e => e.id === 'screenerapi').url}${query}`;\n      return server.request(url, null, {\n        method: 'GET',\n        responseType: 'json',\n        withCredentials : true\n      });\n    });\n}\n\n\nfunction getRawValuesByQcs(qcsRefIds, layerIndex) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/plates?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&limit=200\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n  return request(query).then(res => {\n    const rcds = [];\n    res.plates.forEach(plt => {\n      if (!plt.wells.hasOwnProperty('compoundIds')) return;  // unmapped\n      const values = plt.wells.compoundIds.map((c, i) => {\n        if (c !== null) return { ID: c, rawValue: plt.wells.rawValues[i]};\n      }).filter(e => e !== undefined);\n      Array.prototype.push.apply(rcds, values);\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getRawValuesByQcs = getRawValuesByQcs;\n\n\nfunction getRawValuesMappingColumn(qcsRefIds, layerIndex, compoundIds) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/plates?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&limit=200\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n  return request(query).then(res => {\n    const mapping = {};\n    res.plates.forEach(plt => {\n      if (!plt.wells.hasOwnProperty('compoundIds')) return;  // unmapped\n      plt.wells.compoundIds.forEach((c, i) => {\n        if (compoundIds.includes(c)) {\n          mapping[c] = plt.wells.rawValues[i];\n        }\n      });\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      mapping: mapping\n    };\n  });\n}\nexports.getRawValuesMappingColumn = getRawValuesMappingColumn;\n\n\nfunction getRawValuesByCompound(compoundId) {\n  const query = `/plates?q=wells.compoundIds%3A${compoundId}\\\n&fields=wells.rawValues%2Cwells.compoundIds`;\n  return request(query).then(res => {\n    const rcds = [];\n    res.plates.forEach(plt => {\n      if (!plt.wells.hasOwnProperty('compoundIds')) return;  // unmapped\n      const i = plt.wells.compoundIds.findIndex(c => c === compoundId);\n      rcds.push({\n        qcsRefId: plt.qcsRefId,\n        layerIndex: plt.layerIndex,\n        rawValue: plt.wells.rawValues[i]\n      });\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getRawValuesByCompound = getRawValuesByCompound;\n\n\nfunction getFittingByQcs(qcsRefIds, layerIndex) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/compounds?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&fields=compoundId%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n  return request(query).then(res => {\n    const rcds = res.compounds.map(c => {\n      return {\n        ID: c.compoundId,\n        drcPlot: c.fitting.drcPlot,\n        AC50: c.fitting.linearAC50,\n        hill: Math.round(c.fitting.hillCoefficient * 100) / 100\n      };\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getFittingByQcs = getFittingByQcs;\n\n\nfunction getAC50MappingColumn(qcsRefIds, layerIndex, compoundIds) {\n  const joined = qcsRefIds.join('%2C');\n  const query = `/compounds?qcsRefIds=${joined}\\\n&layerIndices=${layerIndex - 1}\\\n&fields=compoundId%2Cfitting.linearAC50`;\n  return request(query).then(res => {\n    const mapping = {};\n    res.compounds.forEach(c => {\n      if (compoundIds.includes(c.compoundId)) {\n        mapping[c] = c.fitting.linearAC50;\n      }\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      mapping: mapping\n    };\n  });\n}\nexports.getAC50MappingColumn = getAC50MappingColumn;\n\n\nfunction getFittingByCompound(compoundId) {\n  const query = `/compounds?q=compoundId%3A${compoundId}\\\n&fields=compoundId%2CqcsRefId%2ClayerIndex\\\n%2Cfitting.drcPlot%2Cfitting.linearAC50%2Cfitting.hillCoefficient`;\n  return request(query).then(res => {\n    const rcds = res.compounds.map(c => {\n      return {\n        ID: c.compoundId,\n        drcPlot: c.fitting.drcPlot,\n        AC50: c.fitting.linearAC50,\n        hill: Math.round(c.fitting.hillCoefficient * 100) / 100,\n        qcsRefId: c.qcsRefId,\n        layerIndex: c.layerIndex\n      };\n    });\n    const now = new Date();\n    return {\n      created: now.toString(),\n      records: rcds\n    };\n  });\n}\nexports.getFittingByCompound = getFittingByCompound;\n\n\nfunction getDrcPlot(compoundId, plotId, min = -20, max = 120) {\n  const query = `/${plotId}?width=180&height=180&title=compoundId\\\n&activityRangeMin=${min}&activityRangeMax=${max}`;\n  return request(query);\n}\nexports.getDrcPlot = getDrcPlot;\n\n\nfunction getQcsInfo(qcsRefIds) {\n  const ids = qcsRefIds.map(e => `qcsRefId:${e}`).join(' OR ');\n  const query = `/qcSessions?q=${ids}`;\n  return request(query).then(res => res.qcSessions);\n}\nexports.getQcsInfo = getQcsInfo;\n\nfunction getAllResults(qcsRefId, layerIdx) {\n  const query = `/plates?qcsRefIds=${qcsRefId}\\\n&layerIndices=${layerIdx}\\\n&limit=200\\\n&fields=barcode%2CzPrime%2CwellTypes%2Cwells.rawValues%2Cwells.compoundIds`;\n  return request(query, res => res);\n}\nexports.getAllResults = getAllResults;\n\n\nfunction getPlateStats(allResults) {\n  const plates = allResults.plates;\n  const parsed = plates.map(p => {\n    const lowMean = p.wellTypes.NEUTRAL_CONTROL.mean;\n    const lowStdDev = p.wellTypes.NEUTRAL_CONTROL.sd;\n    const highMean = p.wellTypes.INHIBITOR_CONTROL.mean;\n    const highStdDev = p.wellTypes.INHIBITOR_CONTROL.sd;\n    return {\n      barcode: p.barcode,\n      lowCtrlMean: lowMean,\n      lowCtrlStdDev: lowStdDev,\n      lowCtrlCV: lowStdDev / lowMean * 100,\n      highCtrlMean: highMean,\n      highCtrlStdDev: highStdDev,\n      highCtrlCV: highStdDev / highMean * 100,\n      SignalBackground: lowMean / highMean,\n      zPrime: p.zPrime\n    };\n  });\n  return parsed;\n}\nexports.getPlateStats = getPlateStats;\n\n\nfunction getWellValues(allResults) {\n  const plates = allResults.plates;\n  const results = {};\n  plates.forEach(p => {\n    p.wells.compoundIds.forEach((value, i) => {\n      if (value !== null) {\n        results[value] = p.wells.rawValues[i];\n      }\n    });\n  });\n  return results;\n}\nexports.getWellValues = getWellValues;\n\n\nfunction getFirstPlateValues(qcsRefId, layerIdxs) {\n  const query = `/plates?qcsRefIds=${qcsRefId}\\\n&layerIndices=${layerIdxs}\\\n&q=plateIndex%3A0\\\n&fields=layerIndex%2CzPrime%2CwellTypes%2Cwells.rawValues%2Cwells.compoundIds`;\n  return request(query, res => {\n    const results = {};\n    res.plates.forEach(p => {\n      const idx = p.layerIndex;\n      p.wells.compoundIds.forEach(value => {\n        if (value !== null) {\n          if (!results.hasOwnProperty(value)) {\n            results[value] = {};\n          }\n          results[value][idx] = p.wells.rawValues[idx];\n        }\n      });\n    });\n  });\n}\nexports.getFirstPlateValues = getFirstPlateValues;\n*/\n","\nimport {ScreenerFitting, ScreenerRawValue} from './Screener.js';\n\n\nexport class ScreenerFittingStub extends ScreenerFitting {\n  constructor() {\n    super();\n    this.resourceFile = 'screener_fitting_stub.yaml';\n  }\n\n  fittingStub(q) {\n    if (typeof q.qcsRefId !== 'string') throw `${q.qcsRefId} is not a string`;\n    if (typeof q.layerIndex !== 'number') throw `${q.layerIndex} is not a number`;\n    return [\n      {ID: 'DB00189', drcPlot: 'dummy1', AC50: 2.1e-6, hill: 1.1, source: 'target1_validation'},\n      {ID: 'DB00193', drcPlot: 'dummy2', AC50: 4.2e-6, hill: null, source: 'target1_validation'},\n      {ID: 'DB00203', drcPlot: 'dummy3', AC50: 1.0e-5, hill: 0.9, source: 'target1_validation'},\n      {ID: 'DB00865', drcPlot: 'dummy4', AC50: 8.8e-8, hill: 2.1, source: 'target1_validation'},\n      {ID: 'DB01143', drcPlot: 'dummy5', AC50: 'n.d.', hill: null, source: 'target1_validation'},\n      {ID: 'DB01240', drcPlot: 'dummy6', AC50: null, hill: null, source: 'target1_validation'}\n    ];\n  }\n\n  getRecords(q) {\n    return Promise.resolve({ records: this.fittingStub(q) });\n  }\n\n  getRecordsByCompound(compound) {\n    const rcds = this.fittingStub({qcsRefId: 'QCS-YYYY', layerIndex: 1})\n      .filter(e => e.ID === compound);\n    return Promise.resolve({ records: rcds });\n  }\n\n  qcsInfoStub(ids) {\n    if (!Array.isArray(ids)) throw `${ids} is not a string`;\n    const layers = [\n      {layerIndex: 0, name: 'Activity%'},\n      {layerIndex: 1, name: 'Background%'},\n      {layerIndex: 2, name: 'Correction'}\n    ];\n    return [\n      {qcsRefId: 'QCS-XXX0', name: 'hoge', layers: layers},\n      {qcsRefId: 'QCS-XXX1', name: 'fuga', layers: layers},\n      {qcsRefId: 'QCS-XXX2', name: 'piyo', layers: layers}\n    ];\n  }\n\n  getQcsInfo(qcsRefIds) {\n    return Promise.resolve(this.qcsInfoStub(qcsRefIds));\n  }\n}\n\n\nexport class ScreenerRawValueStub extends ScreenerRawValue {\n  constructor() {\n    super();\n    this.resourceFile = 'screener_rawvalue_stub.yaml';\n  }\n\n  rawValueStub(q) {\n    if (typeof q.qcsRefId !== 'string') throw `${q.qcsRefId} is not a string`;\n    if (typeof q.layerIndex !== 'number') throw `${q.layerIndex} is not a number`;\n    return [\n        {ID: 'DB00189', rawValue: 12.7, source: 'target1_screen'},\n        {ID: 'DB00193', rawValue: 43.6, source: 'target1_screen'},\n        {ID: 'DB00203', rawValue: 102.6, source: 'target1_screen'},\n        {ID: 'DB00865', rawValue: -0.6, source: 'target1_screen'},\n        {ID: 'DB01143', rawValue: 50, source: 'target1_screen'},\n        {ID: 'DB01240', rawValue: null, source: 'target1_screen'}\n    ];\n  }\n\n  getRecords(q) {\n    return Promise.resolve({ records: this.rawValueStub(q) });\n  }\n\n  getRecordsByCompound(compound) {\n    const rcds = this.rawValueStub({qcsRefId: 'QCS-XXXX', layerIndex: 1})\n      .filter(e => e.ID === compound);\n    return Promise.resolve({ records: rcds });\n  }\n}\n"],"names":["fetchable","tbl","includes","status","getGlobalConfig","key","globalConfig","setGlobalConfig","value","localChemInstance","API","get","fetcherInstances","Array","from","values","setResources","rsrcs","store","putResources","getAllTables","getAllItems","getTablesByFormat","format","getItemsByFormat","updateTableAttribute","tblID","updateItem","item","updateTable","data","undefined","Promise","resolve","id","update","responseDate","records","columns","recordCount","searchDoneCount","execTime","progress","hasOwnProperty","lastUpdated","Object","assign","deleteTable","deleteItem","reset","initialize","navigator","debug","serviceWorker","register","then","registration","console","info","scope","catch","err","serverTmpl","localServer","templates","res","serverConfig","rsrcFetched","map","api","getResources","extendAsync","e","i","idx","all","loader","document","location","protocol","onLine","fetch","baseURL","formatNum","type","conv","scientific","si","rounded","Number","isNaN","parseFloat","d3","createTable","selection","select","size","append","cols","filter","visible","header","selectAll","d","exit","remove","enter","merge","text","name","updateTableRecords","rcds","keyFunc","rowSelection","rowEntered","classed","html","valueType","digit","actionTable","forEach","rcd","action","app","call","on","this","attr","render","renderTableStatus","tbls","length","renderGraphStatus","grfs","grf","nodeTableId","edges","renderServerStatus","calc","_index","server","entries","push","schema","items","resources","idb","version","stores","getAppSetting","where","equals","first","putAppSetting","k","v","put","orderBy","toArray","bulkPut","reverse","sortBy","getItemById","tableId","callback","modify","delete","putItem","Dexie","Fetcher","[object Object]","available","url","formData","options","reject","xhr","XMLHttpRequest","open","method","responseType","withCredentials","onload","response","send","Date","toString","now","LocalServerActivity","super","domain","entities","query","FormData","set","JSON","stringify","body","credentials","Map","isArray","request","json","rsrc","col","dataColumn","entity","queries","serializedRequest","compound","targets","operator","getRecords","ids","column","mapping","row","ID","blob","LocalServerChemical","hiddenColumns","prototype","apply","extraColumns","ScreenerFitting","resourceFile","enabled","qcsRefId","layerIndex","queryString","compounds","c","compoundId","drcPlot","fitting","AC50","linearAC50","hill","Math","round","hillCoefficient","q","qcsRefIds","join","requestRecords","refid_layer","split","parseInt","plotId","min","max","qcSessions","ScreenerRawValue","pred","plates","plt","wells","compoundIds","rawValue","rawValues","extend","ScreenerFittingStub","source","fittingStub","layers","qcsInfoStub","ScreenerRawValueStub","rawValueStub","urlQuery","window","search","substring","chemical","activity","screenerrawvalue","screenerfitting","screenerrawvaluestub","screenerfittingstub","tasks","command"],"mappings":";sNACO,SAASA,EAAUC,GACxB,OAAQ,cAAe,SAAU,YAAYC,SAASD,EAAIE,QCqB5D,SAAgBC,EAAgBC,GAC9B,OAAOC,EAAaD,GAItB,SAAgBE,EAAgBF,EAAKG,GACnCF,EAAaD,GAAOG,EAgBtB,SAAgBC,IACd,OAAOC,EAAIC,IAAI,YASjB,SAAgBC,IACd,OAAOC,MAAMC,KAAKJ,EAAIK,UA+BxB,SAAgBC,EAAaC,GAC3B,OAAOC,EAAMC,aAAaF,GA6B5B,SAAgBG,IACd,OAAOF,EAAMG,cAIf,SAAgBC,EAAkBC,GAChC,OAAOL,EAAMM,iBAAiBD,GA0DhC,SAAgBE,EAAqBC,EAAOrB,EAAKG,GAC/C,OAAOU,EAAMS,WAAWD,EAAOE,IAC7BA,EAAKvB,GAAOG,IAUhB,SAAgBqB,EAAYC,GAC1B,YAAaC,IAATD,EAA2BE,QAAQC,UACnB,YAAhBH,EAAK3B,OACAsB,EAAqBK,EAAKI,GAAI,SAAU,WAG1ChB,EAAMS,WAAWG,EAAKI,GAAIN,IAC/B,MAAMO,GACJC,aAAcN,EAAKM,aACnBC,QAASP,EAAKO,QACdC,QAASR,EAAKQ,QACdC,YAAaT,EAAKS,YAClBC,gBAAiBV,EAAKU,gBACtBC,SAAUX,EAAKW,SACfC,SAAUZ,EAAKY,SACfvC,OAAQ2B,EAAK3B,QAEX2B,EAAKa,eAAe,iBACtBR,EAAOS,YAAcd,EAAKc,aAE5BC,OAAOC,OAAOlB,EAAMO,KAKxB,SAAgBY,EAAYb,GAC1B,OAAOhB,EAAM8B,WAAWd,GAI1B,SAAgBe,IACd,OAAO/B,EAAM+B,QCxNf,SAASC,IACH,kBAAmBC,YAAcC,EACnCD,UAAUE,cACPC,SAAS,SACTC,KAAKC,IACJC,QAAQC,KACN,qDACAF,EAAaG,SAEdC,MAAMC,IACPJ,QAAQC,KAAK,sCAAuCG,KAE/CT,EACTK,QAAQC,KAAK,2CAEbD,QAAQC,KAAK,kCAEf,MAAMI,EAAaC,EAAYC,YAAYT,KAAKU,IAC9C1D,EAAgB,YAAa0D,EAAID,aAE7BE,EAAeH,EAAY5D,SAASoD,KAAKU,IAC7C1D,EAAgB,SAAU0D,KAKtBE,EAAcvD,IACjBwD,IAAIC,GAAOA,EAAIC,gBACfC,cAAchB,KAAKU,GAKXjD,EAJSiD,EAAIG,IAAI,CAACI,EAAGC,KAC1BD,EAAEE,IAAMD,EACDD,MAIb,OAAOxC,QAAQ2C,KAAKb,EAAYI,EAAcC,IAIhD,SAAgBS,IACd,MAAmC,UAA/BC,SAASC,SAASC,UACpBtB,QAAQC,KAAK,8BACbnD,EAAgB,UAAU,GACnByB,QAAQC,WAEb,WAAYkB,YACTA,UAAU6B,QACbvB,QAAQC,KAAK,0CACbnD,EAAgB,UAAU,GACnByB,QAAQC,WAGZgD,SAASlB,EAAYmB,sBACzB3B,KAAK,KAEJhD,EAAgB,UAAU,GACnB2C,MACNU,MAAM,KACPH,QAAQC,KAAK,yCACbnD,EAAgB,UAAU,GACnByB,QAAQC,YC3DrB,SAAgBkD,EAAU3E,EAAO4E,GAC/B,MAAMC,GACJC,WAAY,MACZC,GAAI,MACJC,QAAS,OAEX,MAAa,QAATJ,EAAuB5E,OACbuB,IAAVvB,GAAiC,OAAVA,GAAkBiF,OAAOC,MAAMlF,GAAe,GAClEA,GAASmF,WAAWnF,GAASoF,EAAGrE,OAAO8D,EAAKD,IAAO5E,GAASA,ECqB9D,SAASqF,EAAYC,EAAW7F,GAEhC6F,EAAUC,OAAO,SAASC,QAC7BF,EAAUG,OAAO,SAASA,OAAO,MAG9BH,EAAUC,OAAO,SAASC,QAC7BF,EAAUG,OAAO,SAEnB,MAAMC,EAAOjG,EAAIqC,QACd6D,OAAO3B,IAAMA,EAAE7B,eAAe,aAA4B,IAAd6B,EAAE4B,SAE3CC,EAASP,EAAUC,OAAO,YAAYO,UAAU,MACnDxE,KAAKoE,EAAMK,GAAKA,EAAElG,KACrBgG,EAAOG,OAAOC,SACdJ,EAAOK,QAAQT,OAAO,MACnBU,MAAMN,GACJO,KAAKL,GAAKA,EAAE5D,eAAe,QAAU4D,EAAEM,KAAON,EAAElG,KAIvD,SAAgByG,EAAmBhB,EAAWiB,EAAMC,GAClD,MAAMX,EAASP,EAAUC,OAAO,YAAYO,UAAU,MACnDxE,OACGmF,EAAenB,EAAUC,OAAO,SAASO,UAAU,MACtDxE,KAAKiF,EAAMC,GACdC,EAAaT,OAAOC,SACpB,MAAMS,EAAaD,EAAaP,QAAQT,OAAO,MAC/CiB,EAAWZ,UAAU,MAClBxE,KAAKyE,GAAKF,EAAOjC,IAAII,GAAK+B,EAAE/B,EAAEnE,OAC9BqG,QAAQT,OAAO,MAClBiB,EAAWP,MAAMM,GACdX,UAAU,MACVa,QAAQ,gBAAgB,GACxBC,KAAK,CAACb,EAAG9B,SACE1C,IAANwE,EAAwB,GACA,SAAxBF,EAAO5B,GAAG4C,UAA6B,SACf,UAAxBhB,EAAO5B,GAAG4C,UAA8B,UACxChB,EAAO5B,GAAG9B,eAAe,UAAgC,QAApB0D,EAAO5B,GAAG6C,MAC1CnC,EAAUoB,EAAGF,EAAO5B,GAAG6C,OAEzBf,GCnEb,SAASgB,EAAYzB,EAAW7F,GAC9BA,EAAIoC,QAAQmF,QAAQC,IAClBA,EAAIC,kEAAoEzH,EAAI0H,UAAUF,EAAIvF,+BACtFlC,EAAUC,GACZwH,EAAIC,yFAEJD,EAAIC,0IAA4ID,EAAIvF,qBAAqBuF,EAAIZ,0BAGjLjB,EAAGG,OAAOD,GAAW8B,KAAK/B,EAAa5F,GACpC2H,KAAKd,EAAoB7G,EAAIoC,QAASkE,GAAKA,EAAErE,IAChD0D,EAAGU,UAAU,yBACVuB,GAAG,QAAS,WACX,MAAM3F,EAAK0D,EAAGG,OAAO+B,MAAMC,KAAK,cAC1BlB,EAAOjB,EAAGG,OAAO+B,MAAMC,KAAK,gBAClCnC,EAAGG,OAAO,oBACPa,wCAAwCC,OAC3CjB,EAAGG,OAAO,mBACP8B,GAAG,QAAS,IAAM9E,EAAYb,GAAIqB,KAAKyE,MAKhD,SAASC,EAAkBC,GACzB,MAAMpG,GACJ6F,IAAK,iBACLrF,UACGjC,IAAK,SACLA,IAAK,iBACLA,IAAK,WACLA,IAAK,YACLA,IAAK,YAEVyB,EAAKO,QAAU6F,EAAK9D,IAAInE,IACjBA,EAAI0C,eAAe,YAAW1C,EAAIE,OAAS,cAE9C+B,GAAMjC,EAAIiC,GACV2E,KAAQ5G,EAAI4G,KACZzE,aAAgBnC,EAAImC,aACpBjC,OAAUF,EAAIE,OACdkC,QAAWpC,EAAIoC,QAAQ8F,UAG3BZ,EAAY,gBAAiBzF,GAI/B,SAASsG,EAAkBC,GACzB,MAAMvG,GACJ6F,IAAK,aACLrF,UACGjC,IAAK,SACLA,IAAK,iBACLA,IAAK,gBACLA,IAAK,WACLA,IAAK,UACLA,IAAK,YAEVyB,EAAKO,QAAUgG,EAAKjE,IAAIkE,IACjBA,EAAI3F,eAAe,YAAW2F,EAAInI,OAAS,cAE9C+B,GAAMoG,EAAIpG,GACV2E,KAAQyB,EAAIzB,KACZzE,aAAgBkG,EAAIlG,aACpBmG,YAAeD,EAAIC,YACnBpI,OAAUmI,EAAInI,OACdqI,MAASF,EAAIjG,QAAQ8F,UAGzBZ,EAAY,gBAAiBzF,GAI/B,SAAS2G,EAAmB3G,GAC1B8D,EAAGG,OAAO,gBAAgB6B,KAAK/B,EAAa/D,EAAK4G,MAC9Cd,KAAKd,EAAoBhF,EAAK4G,KAAKrG,QAASkE,GAAKA,EAAEoC,QACtD,MAAMC,GACJtG,UAAWjC,IAAK,QAASA,IAAK,UAC9BgC,YAEFQ,OAAOgG,QAAQ/G,GAAMqE,OAAO3B,GAAc,SAATA,EAAE,IAChCgD,QAAQhD,GAAKoE,EAAOvG,QAAQyG,MAAMzI,IAAKmE,EAAE,GAAIhE,MAAOgE,EAAE,MACzDoB,EAAGG,OAAO,kBAAkB6B,KAAK/B,EAAa+C,GAC3ChB,KAAKd,EAAoB8B,EAAOvG,QAASkE,GAAKA,EAAEoC,QAIrD,SAASX,IAIP,OAHI5H,EAAgB,WAClBqI,EAAmBrI,EAAgB,WAE9B4B,QAAQ2C,KACbrD,EAAkB,aAAaiC,KAAK0E,GACpC3G,EAAkB,cAAciC,KAAK6E,6DCnGzC,MAAMW,GACJpB,IAAK,MACLqB,MAAO,2BACPC,UAAW,WAGb,IAAIC,EAAM,kDAAU,SACpBA,EAAIC,QAAQ,GAAGC,OAAOL,GAoEtB,OACEM,cAlEF,SAAuBhJ,GACrB,OAAO6I,EAAIvB,IAAI2B,MAAM,OAAOC,OAAOlJ,GAAKmJ,QACrCjG,KAAKU,IACJ,QAAYlC,IAARkC,EACJ,OAAOA,EAAIzD,SA8DAiJ,cAzDjB,SAAuBC,EAAGC,GACxB,OAAOT,EAAIvB,IAAIiC,KAAMvJ,IAAKqJ,EAAGlJ,MAAOmJ,kBAItC,WACE,OAAOT,EAAID,UAAUY,QAAQ,OAC1BC,WAkDyC3I,aA9C9C,SAAsBW,GACpB,OAAOoH,EAAID,UAAUc,QAAQjI,IA8C7BT,YA1CF,WACE,OAAO6H,EAAIF,MAAMa,QAAQ,gBAAgBG,UACtCF,WAwCUtI,iBApCf,SAA0BD,GACxB,OAAO2H,EAAIF,MAAMM,MAAM,UAAUC,OAAOhI,GAAQyI,UAC7CC,OAAO,iBAkCqBC,YA9BjC,SAAqBC,GACnB,OAAOjB,EAAIF,MAAMM,MAAM,MAAMC,OAAOY,GAASX,SA8B7C7H,WA1BF,SAAoBwI,EAASC,GAC3B,OAAOlB,EAAIF,MAAMM,MAAM,MAAMC,OAAOY,GAASE,OAAOD,IAyBxCpH,WArBd,SAAoBmH,GAClB,OAAOjB,EAAIF,MAAMM,MAAM,MAAMC,OAAOY,GAASG,UAoBrBC,QAhB1B,SAAiBzI,GACf,OAAOoH,EAAIF,MAAMY,IAAI9H,UAIvB,WAEE,OAAOoH,EAAIoB,SAAS/G,KAAK,MACvB2F,EAAM,IAAIsB,EAAM,UACZrB,QAAQ,GAAGC,OAAOL,aC5EL0B,EACnBC,cACE5C,KAAK5C,QAAU,GACf4C,KAAK6C,WAAY,EAGnBD,WAAWE,EAAKC,EAAS,KAAMC,MAC7B,OAAO,IAAI9I,QAAQ,CAACC,EAAS8I,KAC3B,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,WAAYJ,EAAUA,EAAQK,OAAS,OAAQP,GACxDI,EAAII,aAAe,iBAAkBN,EAAUA,EAAQM,aAAe,OACtEJ,EAAIK,gBAAkB,oBAAqBP,GAAUA,EAAQO,gBAC7DL,EAAIM,OAAS,MACQ,MAAfN,EAAI7K,OACN4K,EAAOC,GAEP/I,EAAQ+I,EAAIO,YAGhBP,EAAIQ,KAAKX,KAIbH,MAEE,OADY,IAAIe,MACLC,WAGbhB,gBAIAA,aAAaxE,EAAMpE,GAIjB,OADAA,EAAKc,YAAckF,KAAK6D,MACjB7J,EAGT4I,cAIAA,wBAIAA,cAIAA,wBChDWkB,UAA4BnB,EACvCC,cACEmB,QACA/D,KAAK5C,QAAU,KACf4C,KAAKgE,OAAS,WACdhE,KAAKiE,YAGPrB,kBAAkBE,EAAKoB,MACrB,MAAMnB,EAAW,IAAIoB,SAErB,OADApB,EAASqB,IAAI,QAASC,KAAKC,UAAUJ,IAC9B/G,SAAS6C,KAAK5C,UAAU0F,KAC5BO,OAAQ,OAAQkB,KAAMxB,EAAUyB,YAAa,YAGlD5B,QAAQE,EAAKoB,MACX,MAAMnB,EAAW,IAAIoB,SASrB,OARa,IAAIM,IAAI1J,OAAOgG,QAAQmD,IAC/BxE,QAAQ,CAACmC,EAAGD,KACX7I,MAAM2L,QAAQ7C,GAChBA,EAAEnC,QAAQhD,GAAKqG,EAAS5E,OAAOyD,EAAGlF,IAElCqG,EAASqB,IAAIxC,EAAGC,KAGb1E,SAAS6C,KAAK5C,UAAU0F,KAC5BO,OAAQ,OAAQkB,KAAMxB,EAAUyB,YAAa,YAGlD5B,eACE,OAAO5C,KAAK2E,QAAQ,UAAWX,OAAQhE,KAAKgE,SACzCvI,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJA,EAAKzD,UAAUzB,QAAQmF,IACrBA,EAAKb,OAAShE,KAAKgE,OACnBa,EAAKrK,QAAQkF,QAAQoF,IACdA,EAAIjK,eAAe,UAASiK,EAAI/F,KAAO+F,EAAIvM,KAC3CuM,EAAIjK,eAAe,gBAAeiK,EAAIC,WAAaD,EAAIvM,KACvDuM,EAAIjK,eAAe,YAAWiK,EAAIzB,OAAS,OAChDyB,EAAIxG,SAAU,IAEhB0B,KAAKiE,SAASjD,KAAK6D,EAAKG,UAE1BhF,KAAK6C,WAAY,EACV+B,EAAKzD,YAIlByB,WAAWqC,GACT,OAAOjF,KAAKkF,kBAAkB,MAAOD,GAClCxJ,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJA,EAAKZ,OAAShE,KAAKgE,OACZY,IAIbhC,qBAAqBuC,GAEnB,MAAMjB,GACJb,OAAQ,MACR+B,QAASpF,KAAKiE,SACd1L,IAAK,KACLU,QAASkM,GACTE,SAAU,MAEZ,OAAOrF,KAAKsF,WAAWpB,GAGzBtB,WAAW2C,EAAKC,GACd,MAAMtB,GACJb,OAAQ,MACR+B,SAAUI,EAAOR,QACjBzM,IAAK,KACLU,OAAQsM,EACRF,SAAU,MAEZ,OAAOrF,KAAKkF,kBAAkB,MAAOhB,GAClCzI,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJ,MAAMa,KAGN,OAFAb,EAAKrK,QAAQ8D,OAAOqH,GAAOA,EAAI7K,eAAe2K,EAAOT,aAClDrF,QAAQgG,IAASD,EAAQC,EAAIC,IAAMD,EAAIF,EAAOT,eAE/CxM,IAAK2L,EAAM3L,IACXiN,OAAQA,EACRC,QAASA,EACT3K,YAAakF,KAAK6D,SAK1BjB,SACE,OAAO5C,KAAK2E,QAAQ,UAAUlJ,KAAKU,GAAOA,EAAIyI,QAGhDhC,YACE,OAAO5C,KAAK2E,QAAQ,aAAalJ,KAAKU,GAAOA,EAAIyI,QAGnDhC,QAAQsB,GACN,OAAOlE,KAAKkF,kBAAkB,UAAWhB,GAAOzI,KAAKU,GAAOA,EAAI2C,QAGlE8D,YAAYsB,GACV,OAAOlE,KAAK2E,QAAQ,OAAQT,GAAOzI,KAAKU,GAAOA,EAAIyJ,QAGrDhD,aAAasB,GACX,OAAOlE,KAAK2E,QAAQ,YAAaT,GAAOzI,KAAKU,GAAOA,EAAI2C,QAG1D8D,cAAcsB,GACZ,OAAOlE,KAAK2E,QAAQ,aAAcT,GAAOzI,KAAKU,GAAOA,EAAIyI,QAG3DhC,OAAOsB,GACL,OAAOlE,KAAK2E,QAAQ,SAAUT,GAAOzI,KAAKU,GAAOA,EAAIyJ,eAK5CC,UAA4B/B,EACvClB,cACEmB,QACA/D,KAAKgE,OAAS,WACdhE,KAAK8F,eAAiB,MAAO,YAAa,WAAY,QAAS,SAGjElD,aAAaxE,EAAMpE,GACjB,OAAoB,IAAhBoE,EAAKiC,QACPrG,EAAKQ,QAAQkF,QAAQoF,IACnBA,EAAIxG,SAAU0B,KAAK8F,cAAc1N,SAAS0M,EAAIvM,OAEzCyB,IAETjB,MAAMgN,UAAU/E,KAAKgF,MAAMhM,EAAKQ,QAAS4D,GACrCpE,EAAKa,eAAe,kBACtB9B,MAAMgN,UAAU/E,KAAKgF,MAAMhM,EAAKQ,QAASR,EAAKiM,qBACvCjM,EAAKiM,cAEdjM,EAAKQ,QAAQkF,QAAQoF,IACdA,EAAIjK,eAAe,UAASiK,EAAI/F,KAAO+F,EAAIvM,KAC5CuM,EAAIvM,MAAQyB,EAAKkK,MAAM3L,IACzBuM,EAAIxG,SAAU,EAEdwG,EAAIxG,SAAU0B,KAAK8F,cAAc1N,SAAS0M,EAAIvM,OAGlDyB,EAAKc,YAAckF,KAAK6D,MACjB7J,GAGT4I,eACE,OAAO5C,KAAK2E,QAAQ,UAAWX,OAAQhE,KAAKgE,SACzCvI,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJA,EAAKzD,UAAUzB,QAAQmF,IACrBA,EAAKb,OAAShE,KAAKgE,OACnBa,EAAKrK,QAAQkF,QAAQoF,IACdA,EAAIjK,eAAe,UAASiK,EAAI/F,KAAO+F,EAAIvM,KAC3CuM,EAAIjK,eAAe,gBAAeiK,EAAIC,WAAaD,EAAIvM,KACvDuM,EAAIjK,eAAe,YAAWiK,EAAIzB,OAAS,WAChDyB,EAAIxG,SAAU,MAGlB0B,KAAK6C,WAAY,EACV+B,EAAKzD,YAIlByB,WAAWsB,GACT,IAAIpB,EAUJ,OAREA,EADEoB,EAAMrJ,eAAe,WACjB,OACGqJ,EAAMrJ,eAAe,eACxB,SACI,UAAW,OAAOzC,SAAS8L,EAAMb,QACrC,MAEA,UAEDrD,KAAKkF,kBAAkBpC,EAAKoB,GAChCzI,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJA,EAAKZ,OAAShE,KAAKgE,OACZY,IAIbhC,UAAUsB,GACR,OAAOlE,KAAK2E,QAAQ,MAAOT,GAC1BzI,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJA,EAAKZ,OAAShE,KAAKgE,OACnBY,EAAKpK,QAAQkF,QAAQoF,IACnBA,EAAIxG,SAAU0B,KAAK8F,cAAc1N,SAAS0M,EAAIvM,OAEhD,MAAMsL,EAAM,IAAIF,KAEhB,OADAiB,EAAK9J,YAAc+I,EAAID,WAChBgB,WCxMAsB,UAAwBvD,EACnCC,cACEmB,QACA/D,KAAKmG,aAAe,wBACpBnG,KAAKgE,OAAS,KACdhE,KAAK5C,QAAU,KAGjBwF,eACE,MAAMG,EAAW,IAAIoB,SAErB,OADApB,EAASqB,IAAI,WAAYpE,KAAKmG,cACvBhJ,MAAM,UAAWkG,OAAQ,OAAQkB,KAAMxB,EAAUyB,YAAa,YAClE/I,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJ,IAAIA,EAAK/J,eAAe,aAA+B,IAAjB+J,EAAKwB,QAI3C,OAHApG,KAAK6C,WAAY,EACjB7C,KAAKgE,OAASY,EAAKZ,OACnBhE,KAAK5C,QAAUwH,EAAK9B,IACb8B,EAAKzD,UAAU7E,IAAIuI,IACxBA,EAAKb,OAASY,EAAKZ,OACnBa,EAAKG,UAAYH,EAAKwB,YAAYxB,EAAKyB,oBAChCzB,EAAKwB,gBACLxB,EAAKyB,WACZzB,EAAKrK,QAAQkF,QAAQoF,IACdA,EAAIjK,eAAe,UAASiK,EAAI/F,KAAO+F,EAAIvM,KAC3CuM,EAAIjK,eAAe,gBAAeiK,EAAIC,WAAaD,EAAIvM,KAC5DuM,EAAIxG,SAAU,IAETuG,MAKfjC,QAAQ2D,GACN,OAAOpJ,SAAS6C,KAAK5C,UAAUmJ,KAC7BlD,OAAQ,MACRmB,YAAc,YACb/I,KAAKU,GAAOA,EAAIyI,QAGrBhC,eAAe2D,GACb,OAAOvG,KAAK2E,QAAQ4B,GACjB9K,KAAKmJ,KAWKrK,QAVIqK,EAAK4B,UAAUlK,IAAImK,KAE5Bd,GAAIc,EAAEC,WACNL,SAAUI,EAAEJ,SACZC,WAAYG,EAAEH,WACdK,QAASF,EAAEG,QAAQD,QACnBE,KAAMJ,EAAEG,QAAQE,WAChBC,KAAMC,KAAKC,MAAkC,IAA5BR,EAAEG,QAAQM,iBAAyB,UAO9DtE,WAAWuE,GACT,MACMZ,0BADYY,EAAEC,UAAUC,KAAK,uBAEvBF,EAAEb,WAAa,uFAE3B,OAAOtG,KAAKsH,eAAef,GAG7B3D,qBAAqBuC,GACnB,MAAMoB,+BAA2CpB,+GAGjD,OAAOnF,KAAKsH,eAAef,GAG7B3D,WAAW2C,EAAKC,GACd,MAAM+B,EAAc/B,EAAOR,OAAOwC,MAAM,KAClCtD,GACJmC,SAAUkB,EAAY,GACtBjB,WAAYmB,SAASF,EAAY,KAEnC,OAAOvH,KAAKsF,WAAWpB,GAAOzI,KAAKU,IACjC,MAAMsJ,KAGN,OAFAtJ,EAAI5B,QAAQ8D,OAAOqH,GAAOH,EAAInN,SAASsN,EAAIC,KACxCjG,QAAQgG,IAASD,EAAQC,EAAIC,IAAMD,EAAIF,EAAOT,eAE/CxM,IAAK,KACLiN,OAAQA,EACRC,QAASA,EACT3K,YAAakF,KAAK6D,SAKxBjB,WAAW8D,EAAYgB,EAAQC,GAAM,GAAKC,EAAM,KAG9C,MAAMrB,MAAkBmB,4DACRC,sBAAwBC,IACxC,OAAO5H,KAAK2E,QAAQ4B,GAGtB3D,WAAWwE,GACT,MACMb,mBADMa,EAAU9K,IAAII,eAAiBA,KAAK2K,KAAK,UAErD,OAAOrH,KAAK2E,QAAQ4B,GAAa9K,KAAKU,GAAOA,EAAI0L,mBAKxCC,UAAyB5B,EACpCtD,cACEmB,QACA/D,KAAKmG,aAAe,yBAGtBvD,eACE,MAAMG,EAAW,IAAIoB,SAErB,OADApB,EAASqB,IAAI,WAAYpE,KAAKmG,cACvBhJ,MAAM,UAAWkG,OAAQ,OAAQkB,KAAMxB,EAAUyB,YAAa,YAClE/I,KAAKU,GAAOA,EAAIyI,QAChBnJ,KAAKmJ,IACJ,IAAIA,EAAK/J,eAAe,aAA+B,IAAjB+J,EAAKwB,QAI3C,OAHApG,KAAK6C,WAAY,EACjB7C,KAAKgE,OAASY,EAAKZ,OACnBhE,KAAK5C,QAAUwH,EAAK9B,IACb8B,EAAKzD,UAAU7E,IAAIuI,IACxBA,EAAKb,OAASY,EAAKZ,OACnBa,EAAKG,UAAYH,EAAKwB,YAAYxB,EAAKyB,oBAChCzB,EAAKwB,gBACLxB,EAAKyB,WACZzB,EAAKrK,QAAQkF,QAAQoF,IACnBA,EAAIvM,IAAM,WACLuM,EAAIjK,eAAe,UAASiK,EAAI/F,KAAO+F,EAAIvM,KAC3CuM,EAAIjK,eAAe,gBAAeiK,EAAIC,WAAaD,EAAIvM,KAC5DuM,EAAIxG,SAAU,IAETuG,MAKfjC,eAAe2D,EAAawB,GAC1B,OAAO/H,KAAK2E,QAAQ4B,GAAa9K,KAAKU,KAY3B5B,QAXI4B,EAAI6L,OAAO3J,OAAO4J,GAAOA,EAAIC,MAAMrN,eAAe,gBAC5DyB,IAAI2L,GACIA,EAAIC,MAAMC,YAAY7L,IAAI,CAACmK,EAAG9J,MAEjCgJ,GAAIc,EACJJ,SAAU4B,EAAI5B,SACdC,WAAY2B,EAAI3B,WAChB8B,SAAUH,EAAIC,MAAMG,UAAU1L,MAE/B0B,OAAO0J,IACTO,YAKT1F,WAAWuE,GACT,MACMZ,uBADYY,EAAEC,UAAUC,KAAK,uBAEvBF,EAAEb,WAAa,yDAG3B,OAAOtG,KAAKsH,eAAef,EAAa7J,GAAc,OAATA,EAAEiJ,IAGjD/C,qBAAqBuC,GACnB,MAAMoB,mCAA+CpB,+CAErD,OAAOnF,KAAKsH,eAAef,EAAa7J,GAAKA,EAAEiJ,KAAOR,UCxK7CoD,UAA4BrC,EACvCtD,cACEmB,QACA/D,KAAKmG,aAAe,6BAGtBvD,YAAYuE,GACV,GAA0B,iBAAfA,EAAEd,SAAuB,QAASc,EAAEd,2BAC/C,GAA4B,iBAAjBc,EAAEb,WAAyB,QAASa,EAAEb,6BACjD,QACGX,GAAI,UAAWgB,QAAS,SAAUE,KAAM,MAAQE,KAAM,IAAKyB,OAAQ,uBACnE7C,GAAI,UAAWgB,QAAS,SAAUE,KAAM,MAAQE,KAAM,KAAMyB,OAAQ,uBACpE7C,GAAI,UAAWgB,QAAS,SAAUE,KAAM,KAAQE,KAAM,GAAKyB,OAAQ,uBACnE7C,GAAI,UAAWgB,QAAS,SAAUE,KAAM,OAAQE,KAAM,IAAKyB,OAAQ,uBACnE7C,GAAI,UAAWgB,QAAS,SAAUE,KAAM,OAAQE,KAAM,KAAMyB,OAAQ,uBACpE7C,GAAI,UAAWgB,QAAS,SAAUE,KAAM,KAAME,KAAM,KAAMyB,OAAQ,uBAIvE5F,WAAWuE,GACT,OAAOjN,QAAQC,SAAUI,QAASyF,KAAKyI,YAAYtB,KAGrDvE,qBAAqBuC,GACnB,MAAMlG,EAAOe,KAAKyI,aAAapC,SAAU,WAAYC,WAAY,IAC9DjI,OAAO3B,GAAKA,EAAEiJ,KAAOR,GACxB,OAAOjL,QAAQC,SAAUI,QAAS0E,IAGpC2D,YAAY2C,GACV,IAAKxM,MAAM2L,QAAQa,GAAM,QAASA,oBAClC,MAAMmD,IACHpC,WAAY,EAAGvH,KAAM,cACrBuH,WAAY,EAAGvH,KAAM,gBACrBuH,WAAY,EAAGvH,KAAM,eAExB,QACGsH,SAAU,WAAYtH,KAAM,OAAQ2J,OAAQA,IAC5CrC,SAAU,WAAYtH,KAAM,OAAQ2J,OAAQA,IAC5CrC,SAAU,WAAYtH,KAAM,OAAQ2J,OAAQA,IAIjD9F,WAAWwE,GACT,OAAOlN,QAAQC,QAAQ6F,KAAK2I,YAAYvB,WAK/BwB,UAA6Bd,EACxClF,cACEmB,QACA/D,KAAKmG,aAAe,8BAGtBvD,aAAauE,GACX,GAA0B,iBAAfA,EAAEd,SAAuB,QAASc,EAAEd,2BAC/C,GAA4B,iBAAjBc,EAAEb,WAAyB,QAASa,EAAEb,6BACjD,QACKX,GAAI,UAAWyC,SAAU,KAAMI,OAAQ,mBACvC7C,GAAI,UAAWyC,SAAU,KAAMI,OAAQ,mBACvC7C,GAAI,UAAWyC,SAAU,MAAOI,OAAQ,mBACxC7C,GAAI,UAAWyC,UAAW,GAAKI,OAAQ,mBACvC7C,GAAI,UAAWyC,SAAU,GAAII,OAAQ,mBACrC7C,GAAI,UAAWyC,SAAU,KAAMI,OAAQ,mBAI9C5F,WAAWuE,GACT,OAAOjN,QAAQC,SAAUI,QAASyF,KAAK6I,aAAa1B,KAGtDvE,qBAAqBuC,GACnB,MAAMlG,EAAOe,KAAK6I,cAAcxC,SAAU,WAAYC,WAAY,IAC/DjI,OAAO3B,GAAKA,EAAEiJ,KAAOR,GACxB,OAAOjL,QAAQC,SAAUI,QAAS0E,KTrEtC,MAAMzG,GACJ0E,QAAU,EACV4D,UACA5E,aACA4M,aAGFC,OAAO/L,SAASgM,OAAOC,UAAU,GAAGzB,MAAM,KACvClL,IAAII,GAAKA,EAAE8K,MAAM,MAAM9H,QAAQhD,IAC9BlE,EAAasQ,SAASpM,EAAE,IAAMA,EAAE,KAgBpC,MAAM9D,EAAM,IAAI6L,IAAI1J,OAAOgG,SACzBmI,SAAU,IAAIrD,EACdsD,SAAU,IAAIrF,EACdsF,iBAAkB,IAAItB,EACtBuB,gBAAiB,IAAInD,EACrBoD,qBAAsB,IAAIV,EAC1BW,oBAAqB,IAAIhB,KCpCrBtM,EAActD,IGIdsD,EAActD,IAqGpBmF,EAAGG,OAAO,gBACP8B,GAAG,QAAS,IACJzG,IAAemC,KAAK2E,IACzB,MAAMoJ,EAAQpJ,EAAK9D,IAAInE,IACrB,IAAKD,EAAUC,GAAM,OAAO+B,QAAQC,UACpC,MAAM+J,GAAS9J,GAAIjC,EAAIiC,GAAIqP,QAAS,SACpC,OAAOxN,EAAYqJ,WAAWpB,GAAOzI,KAAK1B,KAE5C,OAAOG,QAAQ2C,IAAI2M,KAClB/N,KAAKyE,IAIZpC,EAAGG,OAAO,gBACP8B,GAAG,QAAS,KACXjC,EAAGG,OAAO,oBACPa,KAAK,8EACRhB,EAAGG,OAAO,mBACP8B,GAAG,QAAS,IAAM5E,IAAQM,KAAKyE,MAM7BpD,IAASrB,KAAKyE"}